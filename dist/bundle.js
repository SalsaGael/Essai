/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n//# sourceURL=webpack:///./node_modules/process/browser.js?");

/***/ }),

/***/ "./node_modules/promise-polyfill/lib/index.js":
/*!****************************************************!*\
  !*** ./node_modules/promise-polyfill/lib/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(setImmediate) {\n\n// Store setTimeout reference so promise-polyfill will be unaffected by\n// other code modifying setTimeout (like sinon.useFakeTimers())\nvar setTimeoutFunc = setTimeout;\n\nfunction noop() {}\n\n// Polyfill for Function.prototype.bind\nfunction bind(fn, thisArg) {\n  return function() {\n    fn.apply(thisArg, arguments);\n  };\n}\n\nfunction Promise(fn) {\n  if (!(this instanceof Promise))\n    throw new TypeError('Promises must be constructed via new');\n  if (typeof fn !== 'function') throw new TypeError('not a function');\n  this._state = 0;\n  this._handled = false;\n  this._value = undefined;\n  this._deferreds = [];\n\n  doResolve(fn, this);\n}\n\nfunction handle(self, deferred) {\n  while (self._state === 3) {\n    self = self._value;\n  }\n  if (self._state === 0) {\n    self._deferreds.push(deferred);\n    return;\n  }\n  self._handled = true;\n  Promise._immediateFn(function() {\n    var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;\n    if (cb === null) {\n      (self._state === 1 ? resolve : reject)(deferred.promise, self._value);\n      return;\n    }\n    var ret;\n    try {\n      ret = cb(self._value);\n    } catch (e) {\n      reject(deferred.promise, e);\n      return;\n    }\n    resolve(deferred.promise, ret);\n  });\n}\n\nfunction resolve(self, newValue) {\n  try {\n    // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n    if (newValue === self)\n      throw new TypeError('A promise cannot be resolved with itself.');\n    if (\n      newValue &&\n      (typeof newValue === 'object' || typeof newValue === 'function')\n    ) {\n      var then = newValue.then;\n      if (newValue instanceof Promise) {\n        self._state = 3;\n        self._value = newValue;\n        finale(self);\n        return;\n      } else if (typeof then === 'function') {\n        doResolve(bind(then, newValue), self);\n        return;\n      }\n    }\n    self._state = 1;\n    self._value = newValue;\n    finale(self);\n  } catch (e) {\n    reject(self, e);\n  }\n}\n\nfunction reject(self, newValue) {\n  self._state = 2;\n  self._value = newValue;\n  finale(self);\n}\n\nfunction finale(self) {\n  if (self._state === 2 && self._deferreds.length === 0) {\n    Promise._immediateFn(function() {\n      if (!self._handled) {\n        Promise._unhandledRejectionFn(self._value);\n      }\n    });\n  }\n\n  for (var i = 0, len = self._deferreds.length; i < len; i++) {\n    handle(self, self._deferreds[i]);\n  }\n  self._deferreds = null;\n}\n\nfunction Handler(onFulfilled, onRejected, promise) {\n  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\n  this.onRejected = typeof onRejected === 'function' ? onRejected : null;\n  this.promise = promise;\n}\n\n/**\n * Take a potentially misbehaving resolver function and make sure\n * onFulfilled and onRejected are only called once.\n *\n * Makes no guarantees about asynchrony.\n */\nfunction doResolve(fn, self) {\n  var done = false;\n  try {\n    fn(\n      function(value) {\n        if (done) return;\n        done = true;\n        resolve(self, value);\n      },\n      function(reason) {\n        if (done) return;\n        done = true;\n        reject(self, reason);\n      }\n    );\n  } catch (ex) {\n    if (done) return;\n    done = true;\n    reject(self, ex);\n  }\n}\n\nPromise.prototype['catch'] = function(onRejected) {\n  return this.then(null, onRejected);\n};\n\nPromise.prototype.then = function(onFulfilled, onRejected) {\n  var prom = new this.constructor(noop);\n\n  handle(this, new Handler(onFulfilled, onRejected, prom));\n  return prom;\n};\n\nPromise.prototype['finally'] = function(callback) {\n  var constructor = this.constructor;\n  return this.then(\n    function(value) {\n      return constructor.resolve(callback()).then(function() {\n        return value;\n      });\n    },\n    function(reason) {\n      return constructor.resolve(callback()).then(function() {\n        return constructor.reject(reason);\n      });\n    }\n  );\n};\n\nPromise.all = function(arr) {\n  return new Promise(function(resolve, reject) {\n    if (!arr || typeof arr.length === 'undefined')\n      throw new TypeError('Promise.all accepts an array');\n    var args = Array.prototype.slice.call(arr);\n    if (args.length === 0) return resolve([]);\n    var remaining = args.length;\n\n    function res(i, val) {\n      try {\n        if (val && (typeof val === 'object' || typeof val === 'function')) {\n          var then = val.then;\n          if (typeof then === 'function') {\n            then.call(\n              val,\n              function(val) {\n                res(i, val);\n              },\n              reject\n            );\n            return;\n          }\n        }\n        args[i] = val;\n        if (--remaining === 0) {\n          resolve(args);\n        }\n      } catch (ex) {\n        reject(ex);\n      }\n    }\n\n    for (var i = 0; i < args.length; i++) {\n      res(i, args[i]);\n    }\n  });\n};\n\nPromise.resolve = function(value) {\n  if (value && typeof value === 'object' && value.constructor === Promise) {\n    return value;\n  }\n\n  return new Promise(function(resolve) {\n    resolve(value);\n  });\n};\n\nPromise.reject = function(value) {\n  return new Promise(function(resolve, reject) {\n    reject(value);\n  });\n};\n\nPromise.race = function(values) {\n  return new Promise(function(resolve, reject) {\n    for (var i = 0, len = values.length; i < len; i++) {\n      values[i].then(resolve, reject);\n    }\n  });\n};\n\n// Use polyfill for setImmediate for performance gains\nPromise._immediateFn =\n  (typeof setImmediate === 'function' &&\n    function(fn) {\n      setImmediate(fn);\n    }) ||\n  function(fn) {\n    setTimeoutFunc(fn, 0);\n  };\n\nPromise._unhandledRejectionFn = function _unhandledRejectionFn(err) {\n  if (typeof console !== 'undefined' && console) {\n    console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console\n  }\n};\n\nmodule.exports = Promise;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../timers-browserify/main.js */ \"./node_modules/timers-browserify/main.js\").setImmediate))\n\n//# sourceURL=webpack:///./node_modules/promise-polyfill/lib/index.js?");

/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/setimmediate/setImmediate.js?");

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(/*! setimmediate */ \"./node_modules/setimmediate/setImmediate.js\");\n// On some exotic environments, it's not clear which object `setimmeidate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/timers-browserify/main.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ }),

/***/ "./node_modules/whatwg-fetch/fetch.js":
/*!********************************************!*\
  !*** ./node_modules/whatwg-fetch/fetch.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ]\n\n    var isDataView = function(obj) {\n      return obj && DataView.prototype.isPrototypeOf(obj)\n    }\n\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1])\n      }, this)\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var oldValue = this.map[name]\n    this.map[name] = oldValue ? oldValue+','+value : value\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name)\n    return this.has(name) ? this.map[name] : null\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value)\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this)\n      }\n    }\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsArrayBuffer(blob)\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsText(blob)\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf)\n    var chars = new Array(view.length)\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i])\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength)\n      view.set(new Uint8Array(buf))\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (!body) {\n        this._bodyText = ''\n      } else if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer)\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer])\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body)\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      }\n    }\n\n    this.text = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = String(input)\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, { body: this._bodyInit })\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers()\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ')\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n    return headers\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = options.status === undefined ? 200 : options.status\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = 'statusText' in options ? options.statusText : 'OK'\n    this.headers = new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init)\n      var xhr = new XMLHttpRequest()\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        }\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n\n\n//# sourceURL=webpack:///./node_modules/whatwg-fetch/fetch.js?");

/***/ }),

/***/ "./src/data.js":
/*!*********************!*\
  !*** ./src/data.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.data = exports.readData = exports.writeData = undefined;\n\nvar _paRender = __webpack_require__(/*! ./pa.render.js */ \"./src/pa.render.js\");\n\nvar _paRender2 = _interopRequireDefault(_paRender);\n\nvar _paCalc = __webpack_require__(/*! ./pa.calc.js */ \"./src/pa.calc.js\");\n\nvar _paCalc2 = _interopRequireDefault(_paCalc);\n\n__webpack_require__(/*! whatwg-fetch */ \"./node_modules/whatwg-fetch/fetch.js\");\n\nvar _promisePolyfill = __webpack_require__(/*! promise-polyfill */ \"./node_modules/promise-polyfill/lib/index.js\");\n\nvar _promisePolyfill2 = _interopRequireDefault(_promisePolyfill);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// To add to window\nif (!window.Promise) {\n    window.Promise = _promisePolyfill2.default;\n}\n\nvar data_json = void 0;\nvar data = void 0;\n\nvar writeData = function writeData() {\n    data_json = JSON.stringify(data);\n    localStorage.removeItem(\"donnees\");\n    localStorage.setItem(\"donnees\", data_json);\n};\n\nvar readData = function readData() {\n    if (localStorage.donnees) {\n        console.log(\"Données déja présente en local storage\");\n        data_json = localStorage.getItem(\"donnees\");\n        exports.data = data = JSON.parse(data_json);\n    } else {\n        fetch('data.json').then(function (resp) {\n            return resp.json();\n        }).then(function (data_import) {\n            exports.data = data = data_import;\n            data_json = JSON.stringify(data);\n            writeData();\n            (0, _paRender2.default)();\n            (0, _paCalc2.default)();\n            tabCalcPuisAct.classList.add(\"active\");\n            console.log(\"Pas de cache en local storage, données par défault importées\");\n        }).catch(function (err) {\n            console.log('Impossible d\\'importer les donn\\xE9es', err);\n        });\n    }\n};\n\nexports.writeData = writeData;\nexports.readData = readData;\nexports.data = data;\n\n//# sourceURL=webpack:///./src/data.js?");

/***/ }),

/***/ "./src/hammer.js":
/*!***********************!*\
  !*** ./src/hammer.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var __WEBPACK_AMD_DEFINE_RESULT__;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*! Hammer.JS - v2.0.8 - 2016-04-23\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function (window, document, exportName, undefined) {\n    'use strict';\n\n    var VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\n    var TEST_ELEMENT = document.createElement('div');\n\n    var TYPE_FUNCTION = 'function';\n\n    var round = Math.round;\n    var abs = Math.abs;\n    var now = Date.now;\n\n    /**\n     * set a timeout with a given scope\n     * @param {Function} fn\n     * @param {Number} timeout\n     * @param {Object} context\n     * @returns {number}\n     */\n    function setTimeoutContext(fn, timeout, context) {\n        return setTimeout(bindFn(fn, context), timeout);\n    }\n\n    /**\n     * if the argument is an array, we want to execute the fn on each entry\n     * if it aint an array we don't want to do a thing.\n     * this is used by all the methods that accept a single and array argument.\n     * @param {*|Array} arg\n     * @param {String} fn\n     * @param {Object} [context]\n     * @returns {Boolean}\n     */\n    function invokeArrayArg(arg, fn, context) {\n        if (Array.isArray(arg)) {\n            each(arg, context[fn], context);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * walk objects and arrays\n     * @param {Object} obj\n     * @param {Function} iterator\n     * @param {Object} context\n     */\n    function each(obj, iterator, context) {\n        var i;\n\n        if (!obj) {\n            return;\n        }\n\n        if (obj.forEach) {\n            obj.forEach(iterator, context);\n        } else if (obj.length !== undefined) {\n            i = 0;\n            while (i < obj.length) {\n                iterator.call(context, obj[i], i, obj);\n                i++;\n            }\n        } else {\n            for (i in obj) {\n                obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n            }\n        }\n    }\n\n    /**\n     * wrap a method with a deprecation warning and stack trace\n     * @param {Function} method\n     * @param {String} name\n     * @param {String} message\n     * @returns {Function} A new function wrapping the supplied method.\n     */\n    function deprecate(method, name, message) {\n        var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n        return function () {\n            var e = new Error('get-stack-trace');\n            var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '').replace(/^\\s+at\\s+/gm, '').replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n            var log = window.console && (window.console.warn || window.console.log);\n            if (log) {\n                log.call(window.console, deprecationMessage, stack);\n            }\n            return method.apply(this, arguments);\n        };\n    }\n\n    /**\n     * extend object.\n     * means that properties in dest will be overwritten by the ones in src.\n     * @param {Object} target\n     * @param {...Object} objects_to_assign\n     * @returns {Object} target\n     */\n    var assign;\n    if (typeof Object.assign !== 'function') {\n        assign = function assign(target) {\n            if (target === undefined || target === null) {\n                throw new TypeError('Cannot convert undefined or null to object');\n            }\n\n            var output = Object(target);\n            for (var index = 1; index < arguments.length; index++) {\n                var source = arguments[index];\n                if (source !== undefined && source !== null) {\n                    for (var nextKey in source) {\n                        if (source.hasOwnProperty(nextKey)) {\n                            output[nextKey] = source[nextKey];\n                        }\n                    }\n                }\n            }\n            return output;\n        };\n    } else {\n        assign = Object.assign;\n    }\n\n    /**\n     * extend object.\n     * means that properties in dest will be overwritten by the ones in src.\n     * @param {Object} dest\n     * @param {Object} src\n     * @param {Boolean} [merge=false]\n     * @returns {Object} dest\n     */\n    var extend = deprecate(function extend(dest, src, merge) {\n        var keys = Object.keys(src);\n        var i = 0;\n        while (i < keys.length) {\n            if (!merge || merge && dest[keys[i]] === undefined) {\n                dest[keys[i]] = src[keys[i]];\n            }\n            i++;\n        }\n        return dest;\n    }, 'extend', 'Use `assign`.');\n\n    /**\n     * merge the values from src in the dest.\n     * means that properties that exist in dest will not be overwritten by src\n     * @param {Object} dest\n     * @param {Object} src\n     * @returns {Object} dest\n     */\n    var merge = deprecate(function merge(dest, src) {\n        return extend(dest, src, true);\n    }, 'merge', 'Use `assign`.');\n\n    /**\n     * simple class inheritance\n     * @param {Function} child\n     * @param {Function} base\n     * @param {Object} [properties]\n     */\n    function inherit(child, base, properties) {\n        var baseP = base.prototype,\n            childP;\n\n        childP = child.prototype = Object.create(baseP);\n        childP.constructor = child;\n        childP._super = baseP;\n\n        if (properties) {\n            assign(childP, properties);\n        }\n    }\n\n    /**\n     * simple function bind\n     * @param {Function} fn\n     * @param {Object} context\n     * @returns {Function}\n     */\n    function bindFn(fn, context) {\n        return function boundFn() {\n            return fn.apply(context, arguments);\n        };\n    }\n\n    /**\n     * let a boolean value also be a function that must return a boolean\n     * this first item in args will be used as the context\n     * @param {Boolean|Function} val\n     * @param {Array} [args]\n     * @returns {Boolean}\n     */\n    function boolOrFn(val, args) {\n        if ((typeof val === 'undefined' ? 'undefined' : _typeof(val)) == TYPE_FUNCTION) {\n            return val.apply(args ? args[0] || undefined : undefined, args);\n        }\n        return val;\n    }\n\n    /**\n     * use the val2 when val1 is undefined\n     * @param {*} val1\n     * @param {*} val2\n     * @returns {*}\n     */\n    function ifUndefined(val1, val2) {\n        return val1 === undefined ? val2 : val1;\n    }\n\n    /**\n     * addEventListener with multiple events at once\n     * @param {EventTarget} target\n     * @param {String} types\n     * @param {Function} handler\n     */\n    function addEventListeners(target, types, handler) {\n        each(splitStr(types), function (type) {\n            target.addEventListener(type, handler, false);\n        });\n    }\n\n    /**\n     * removeEventListener with multiple events at once\n     * @param {EventTarget} target\n     * @param {String} types\n     * @param {Function} handler\n     */\n    function removeEventListeners(target, types, handler) {\n        each(splitStr(types), function (type) {\n            target.removeEventListener(type, handler, false);\n        });\n    }\n\n    /**\n     * find if a node is in the given parent\n     * @method hasParent\n     * @param {HTMLElement} node\n     * @param {HTMLElement} parent\n     * @return {Boolean} found\n     */\n    function hasParent(node, parent) {\n        while (node) {\n            if (node == parent) {\n                return true;\n            }\n            node = node.parentNode;\n        }\n        return false;\n    }\n\n    /**\n     * small indexOf wrapper\n     * @param {String} str\n     * @param {String} find\n     * @returns {Boolean} found\n     */\n    function inStr(str, find) {\n        return str.indexOf(find) > -1;\n    }\n\n    /**\n     * split string on whitespace\n     * @param {String} str\n     * @returns {Array} words\n     */\n    function splitStr(str) {\n        return str.trim().split(/\\s+/g);\n    }\n\n    /**\n     * find if a array contains the object using indexOf or a simple polyFill\n     * @param {Array} src\n     * @param {String} find\n     * @param {String} [findByKey]\n     * @return {Boolean|Number} false when not found, or the index\n     */\n    function inArray(src, find, findByKey) {\n        if (src.indexOf && !findByKey) {\n            return src.indexOf(find);\n        } else {\n            var i = 0;\n            while (i < src.length) {\n                if (findByKey && src[i][findByKey] == find || !findByKey && src[i] === find) {\n                    return i;\n                }\n                i++;\n            }\n            return -1;\n        }\n    }\n\n    /**\n     * convert array-like objects to real arrays\n     * @param {Object} obj\n     * @returns {Array}\n     */\n    function toArray(obj) {\n        return Array.prototype.slice.call(obj, 0);\n    }\n\n    /**\n     * unique array with objects based on a key (like 'id') or just by the array's value\n     * @param {Array} src [{id:1},{id:2},{id:1}]\n     * @param {String} [key]\n     * @param {Boolean} [sort=False]\n     * @returns {Array} [{id:1},{id:2}]\n     */\n    function uniqueArray(src, key, sort) {\n        var results = [];\n        var values = [];\n        var i = 0;\n\n        while (i < src.length) {\n            var val = key ? src[i][key] : src[i];\n            if (inArray(values, val) < 0) {\n                results.push(src[i]);\n            }\n            values[i] = val;\n            i++;\n        }\n\n        if (sort) {\n            if (!key) {\n                results = results.sort();\n            } else {\n                results = results.sort(function sortUniqueArray(a, b) {\n                    return a[key] > b[key];\n                });\n            }\n        }\n\n        return results;\n    }\n\n    /**\n     * get the prefixed property\n     * @param {Object} obj\n     * @param {String} property\n     * @returns {String|Undefined} prefixed\n     */\n    function prefixed(obj, property) {\n        var prefix, prop;\n        var camelProp = property[0].toUpperCase() + property.slice(1);\n\n        var i = 0;\n        while (i < VENDOR_PREFIXES.length) {\n            prefix = VENDOR_PREFIXES[i];\n            prop = prefix ? prefix + camelProp : property;\n\n            if (prop in obj) {\n                return prop;\n            }\n            i++;\n        }\n        return undefined;\n    }\n\n    /**\n     * get a unique id\n     * @returns {number} uniqueId\n     */\n    var _uniqueId = 1;\n    function uniqueId() {\n        return _uniqueId++;\n    }\n\n    /**\n     * get the window object of an element\n     * @param {HTMLElement} element\n     * @returns {DocumentView|Window}\n     */\n    function getWindowForElement(element) {\n        var doc = element.ownerDocument || element;\n        return doc.defaultView || doc.parentWindow || window;\n    }\n\n    var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\n    var SUPPORT_TOUCH = 'ontouchstart' in window;\n    var SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\n    var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\n    var INPUT_TYPE_TOUCH = 'touch';\n    var INPUT_TYPE_PEN = 'pen';\n    var INPUT_TYPE_MOUSE = 'mouse';\n    var INPUT_TYPE_KINECT = 'kinect';\n\n    var COMPUTE_INTERVAL = 25;\n\n    var INPUT_START = 1;\n    var INPUT_MOVE = 2;\n    var INPUT_END = 4;\n    var INPUT_CANCEL = 8;\n\n    var DIRECTION_NONE = 1;\n    var DIRECTION_LEFT = 2;\n    var DIRECTION_RIGHT = 4;\n    var DIRECTION_UP = 8;\n    var DIRECTION_DOWN = 16;\n\n    var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\n    var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\n    var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\n    var PROPS_XY = ['x', 'y'];\n    var PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n    /**\n     * create new input type manager\n     * @param {Manager} manager\n     * @param {Function} callback\n     * @returns {Input}\n     * @constructor\n     */\n    function Input(manager, callback) {\n        var self = this;\n        this.manager = manager;\n        this.callback = callback;\n        this.element = manager.element;\n        this.target = manager.options.inputTarget;\n\n        // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n        // so when disabled the input events are completely bypassed.\n        this.domHandler = function (ev) {\n            if (boolOrFn(manager.options.enable, [manager])) {\n                self.handler(ev);\n            }\n        };\n\n        this.init();\n    }\n\n    Input.prototype = {\n        /**\n         * should handle the inputEvent data and trigger the callback\n         * @virtual\n         */\n        handler: function handler() {},\n\n        /**\n         * bind the events\n         */\n        init: function init() {\n            this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n            this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n            this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n        },\n\n        /**\n         * unbind the events\n         */\n        destroy: function destroy() {\n            this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n            this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n            this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n        }\n    };\n\n    /**\n     * create new input type manager\n     * called by the Manager constructor\n     * @param {Hammer} manager\n     * @returns {Input}\n     */\n    function createInputInstance(manager) {\n        var Type;\n        var inputClass = manager.options.inputClass;\n\n        if (inputClass) {\n            Type = inputClass;\n        } else if (SUPPORT_POINTER_EVENTS) {\n            Type = PointerEventInput;\n        } else if (SUPPORT_ONLY_TOUCH) {\n            Type = TouchInput;\n        } else if (!SUPPORT_TOUCH) {\n            Type = MouseInput;\n        } else {\n            Type = TouchMouseInput;\n        }\n        return new Type(manager, inputHandler);\n    }\n\n    /**\n     * handle input events\n     * @param {Manager} manager\n     * @param {String} eventType\n     * @param {Object} input\n     */\n    function inputHandler(manager, eventType, input) {\n        var pointersLen = input.pointers.length;\n        var changedPointersLen = input.changedPointers.length;\n        var isFirst = eventType & INPUT_START && pointersLen - changedPointersLen === 0;\n        var isFinal = eventType & (INPUT_END | INPUT_CANCEL) && pointersLen - changedPointersLen === 0;\n\n        input.isFirst = !!isFirst;\n        input.isFinal = !!isFinal;\n\n        if (isFirst) {\n            manager.session = {};\n        }\n\n        // source event is the normalized value of the domEvents\n        // like 'touchstart, mouseup, pointerdown'\n        input.eventType = eventType;\n\n        // compute scale, rotation etc\n        computeInputData(manager, input);\n\n        // emit secret event\n        manager.emit('hammer.input', input);\n\n        manager.recognize(input);\n        manager.session.prevInput = input;\n    }\n\n    /**\n     * extend the data with some usable properties like scale, rotate, velocity etc\n     * @param {Object} manager\n     * @param {Object} input\n     */\n    function computeInputData(manager, input) {\n        var session = manager.session;\n        var pointers = input.pointers;\n        var pointersLength = pointers.length;\n\n        // store the first input to calculate the distance and direction\n        if (!session.firstInput) {\n            session.firstInput = simpleCloneInputData(input);\n        }\n\n        // to compute scale and rotation we need to store the multiple touches\n        if (pointersLength > 1 && !session.firstMultiple) {\n            session.firstMultiple = simpleCloneInputData(input);\n        } else if (pointersLength === 1) {\n            session.firstMultiple = false;\n        }\n\n        var firstInput = session.firstInput;\n        var firstMultiple = session.firstMultiple;\n        var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n        var center = input.center = getCenter(pointers);\n        input.timeStamp = now();\n        input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n        input.angle = getAngle(offsetCenter, center);\n        input.distance = getDistance(offsetCenter, center);\n\n        computeDeltaXY(session, input);\n        input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n        var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n        input.overallVelocityX = overallVelocity.x;\n        input.overallVelocityY = overallVelocity.y;\n        input.overallVelocity = abs(overallVelocity.x) > abs(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;\n\n        input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n        input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n        input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;\n\n        computeIntervalInputData(session, input);\n\n        // find the correct target\n        var target = manager.element;\n        if (hasParent(input.srcEvent.target, target)) {\n            target = input.srcEvent.target;\n        }\n        input.target = target;\n    }\n\n    function computeDeltaXY(session, input) {\n        var center = input.center;\n        var offset = session.offsetDelta || {};\n        var prevDelta = session.prevDelta || {};\n        var prevInput = session.prevInput || {};\n\n        if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n            prevDelta = session.prevDelta = {\n                x: prevInput.deltaX || 0,\n                y: prevInput.deltaY || 0\n            };\n\n            offset = session.offsetDelta = {\n                x: center.x,\n                y: center.y\n            };\n        }\n\n        input.deltaX = prevDelta.x + (center.x - offset.x);\n        input.deltaY = prevDelta.y + (center.y - offset.y);\n    }\n\n    /**\n     * velocity is calculated every x ms\n     * @param {Object} session\n     * @param {Object} input\n     */\n    function computeIntervalInputData(session, input) {\n        var last = session.lastInterval || input,\n            deltaTime = input.timeStamp - last.timeStamp,\n            velocity,\n            velocityX,\n            velocityY,\n            direction;\n\n        if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n            var deltaX = input.deltaX - last.deltaX;\n            var deltaY = input.deltaY - last.deltaY;\n\n            var v = getVelocity(deltaTime, deltaX, deltaY);\n            velocityX = v.x;\n            velocityY = v.y;\n            velocity = abs(v.x) > abs(v.y) ? v.x : v.y;\n            direction = getDirection(deltaX, deltaY);\n\n            session.lastInterval = input;\n        } else {\n            // use latest velocity info if it doesn't overtake a minimum period\n            velocity = last.velocity;\n            velocityX = last.velocityX;\n            velocityY = last.velocityY;\n            direction = last.direction;\n        }\n\n        input.velocity = velocity;\n        input.velocityX = velocityX;\n        input.velocityY = velocityY;\n        input.direction = direction;\n    }\n\n    /**\n     * create a simple clone from the input used for storage of firstInput and firstMultiple\n     * @param {Object} input\n     * @returns {Object} clonedInputData\n     */\n    function simpleCloneInputData(input) {\n        // make a simple copy of the pointers because we will get a reference if we don't\n        // we only need clientXY for the calculations\n        var pointers = [];\n        var i = 0;\n        while (i < input.pointers.length) {\n            pointers[i] = {\n                clientX: round(input.pointers[i].clientX),\n                clientY: round(input.pointers[i].clientY)\n            };\n            i++;\n        }\n\n        return {\n            timeStamp: now(),\n            pointers: pointers,\n            center: getCenter(pointers),\n            deltaX: input.deltaX,\n            deltaY: input.deltaY\n        };\n    }\n\n    /**\n     * get the center of all the pointers\n     * @param {Array} pointers\n     * @return {Object} center contains `x` and `y` properties\n     */\n    function getCenter(pointers) {\n        var pointersLength = pointers.length;\n\n        // no need to loop when only one touch\n        if (pointersLength === 1) {\n            return {\n                x: round(pointers[0].clientX),\n                y: round(pointers[0].clientY)\n            };\n        }\n\n        var x = 0,\n            y = 0,\n            i = 0;\n        while (i < pointersLength) {\n            x += pointers[i].clientX;\n            y += pointers[i].clientY;\n            i++;\n        }\n\n        return {\n            x: round(x / pointersLength),\n            y: round(y / pointersLength)\n        };\n    }\n\n    /**\n     * calculate the velocity between two points. unit is in px per ms.\n     * @param {Number} deltaTime\n     * @param {Number} x\n     * @param {Number} y\n     * @return {Object} velocity `x` and `y`\n     */\n    function getVelocity(deltaTime, x, y) {\n        return {\n            x: x / deltaTime || 0,\n            y: y / deltaTime || 0\n        };\n    }\n\n    /**\n     * get the direction between two points\n     * @param {Number} x\n     * @param {Number} y\n     * @return {Number} direction\n     */\n    function getDirection(x, y) {\n        if (x === y) {\n            return DIRECTION_NONE;\n        }\n\n        if (abs(x) >= abs(y)) {\n            return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n        }\n        return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n    }\n\n    /**\n     * calculate the absolute distance between two points\n     * @param {Object} p1 {x, y}\n     * @param {Object} p2 {x, y}\n     * @param {Array} [props] containing x and y keys\n     * @return {Number} distance\n     */\n    function getDistance(p1, p2, props) {\n        if (!props) {\n            props = PROPS_XY;\n        }\n        var x = p2[props[0]] - p1[props[0]],\n            y = p2[props[1]] - p1[props[1]];\n\n        return Math.sqrt(x * x + y * y);\n    }\n\n    /**\n     * calculate the angle between two coordinates\n     * @param {Object} p1\n     * @param {Object} p2\n     * @param {Array} [props] containing x and y keys\n     * @return {Number} angle\n     */\n    function getAngle(p1, p2, props) {\n        if (!props) {\n            props = PROPS_XY;\n        }\n        var x = p2[props[0]] - p1[props[0]],\n            y = p2[props[1]] - p1[props[1]];\n        return Math.atan2(y, x) * 180 / Math.PI;\n    }\n\n    /**\n     * calculate the rotation degrees between two pointersets\n     * @param {Array} start array of pointers\n     * @param {Array} end array of pointers\n     * @return {Number} rotation\n     */\n    function getRotation(start, end) {\n        return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n    }\n\n    /**\n     * calculate the scale factor between two pointersets\n     * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n     * @param {Array} start array of pointers\n     * @param {Array} end array of pointers\n     * @return {Number} scale\n     */\n    function getScale(start, end) {\n        return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n    }\n\n    var MOUSE_INPUT_MAP = {\n        mousedown: INPUT_START,\n        mousemove: INPUT_MOVE,\n        mouseup: INPUT_END\n    };\n\n    var MOUSE_ELEMENT_EVENTS = 'mousedown';\n    var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n    /**\n     * Mouse events input\n     * @constructor\n     * @extends Input\n     */\n    function MouseInput() {\n        this.evEl = MOUSE_ELEMENT_EVENTS;\n        this.evWin = MOUSE_WINDOW_EVENTS;\n\n        this.pressed = false; // mousedown state\n\n        Input.apply(this, arguments);\n    }\n\n    inherit(MouseInput, Input, {\n        /**\n         * handle mouse events\n         * @param {Object} ev\n         */\n        handler: function MEhandler(ev) {\n            var eventType = MOUSE_INPUT_MAP[ev.type];\n\n            // on start we want to have the left mouse button down\n            if (eventType & INPUT_START && ev.button === 0) {\n                this.pressed = true;\n            }\n\n            if (eventType & INPUT_MOVE && ev.which !== 1) {\n                eventType = INPUT_END;\n            }\n\n            // mouse must be down\n            if (!this.pressed) {\n                return;\n            }\n\n            if (eventType & INPUT_END) {\n                this.pressed = false;\n            }\n\n            this.callback(this.manager, eventType, {\n                pointers: [ev],\n                changedPointers: [ev],\n                pointerType: INPUT_TYPE_MOUSE,\n                srcEvent: ev\n            });\n        }\n    });\n\n    var POINTER_INPUT_MAP = {\n        pointerdown: INPUT_START,\n        pointermove: INPUT_MOVE,\n        pointerup: INPUT_END,\n        pointercancel: INPUT_CANCEL,\n        pointerout: INPUT_CANCEL\n    };\n\n    // in IE10 the pointer types is defined as an enum\n    var IE10_POINTER_TYPE_ENUM = {\n        2: INPUT_TYPE_TOUCH,\n        3: INPUT_TYPE_PEN,\n        4: INPUT_TYPE_MOUSE,\n        5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n    };\n\n    var POINTER_ELEMENT_EVENTS = 'pointerdown';\n    var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n    // IE10 has prefixed support, and case-sensitive\n    if (window.MSPointerEvent && !window.PointerEvent) {\n        POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n        POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n    }\n\n    /**\n     * Pointer events input\n     * @constructor\n     * @extends Input\n     */\n    function PointerEventInput() {\n        this.evEl = POINTER_ELEMENT_EVENTS;\n        this.evWin = POINTER_WINDOW_EVENTS;\n\n        Input.apply(this, arguments);\n\n        this.store = this.manager.session.pointerEvents = [];\n    }\n\n    inherit(PointerEventInput, Input, {\n        /**\n         * handle mouse events\n         * @param {Object} ev\n         */\n        handler: function PEhandler(ev) {\n            var store = this.store;\n            var removePointer = false;\n\n            var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n            var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n            var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n            var isTouch = pointerType == INPUT_TYPE_TOUCH;\n\n            // get index of the event in the store\n            var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n            // start and mouse must be down\n            if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n                if (storeIndex < 0) {\n                    store.push(ev);\n                    storeIndex = store.length - 1;\n                }\n            } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n                removePointer = true;\n            }\n\n            // it not found, so the pointer hasn't been down (so it's probably a hover)\n            if (storeIndex < 0) {\n                return;\n            }\n\n            // update the event in the store\n            store[storeIndex] = ev;\n\n            this.callback(this.manager, eventType, {\n                pointers: store,\n                changedPointers: [ev],\n                pointerType: pointerType,\n                srcEvent: ev\n            });\n\n            if (removePointer) {\n                // remove from the store\n                store.splice(storeIndex, 1);\n            }\n        }\n    });\n\n    var SINGLE_TOUCH_INPUT_MAP = {\n        touchstart: INPUT_START,\n        touchmove: INPUT_MOVE,\n        touchend: INPUT_END,\n        touchcancel: INPUT_CANCEL\n    };\n\n    var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\n    var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n    /**\n     * Touch events input\n     * @constructor\n     * @extends Input\n     */\n    function SingleTouchInput() {\n        this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n        this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n        this.started = false;\n\n        Input.apply(this, arguments);\n    }\n\n    inherit(SingleTouchInput, Input, {\n        handler: function TEhandler(ev) {\n            var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n            // should we handle the touch events?\n            if (type === INPUT_START) {\n                this.started = true;\n            }\n\n            if (!this.started) {\n                return;\n            }\n\n            var touches = normalizeSingleTouches.call(this, ev, type);\n\n            // when done, reset the started state\n            if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n                this.started = false;\n            }\n\n            this.callback(this.manager, type, {\n                pointers: touches[0],\n                changedPointers: touches[1],\n                pointerType: INPUT_TYPE_TOUCH,\n                srcEvent: ev\n            });\n        }\n    });\n\n    /**\n     * @this {TouchInput}\n     * @param {Object} ev\n     * @param {Number} type flag\n     * @returns {undefined|Array} [all, changed]\n     */\n    function normalizeSingleTouches(ev, type) {\n        var all = toArray(ev.touches);\n        var changed = toArray(ev.changedTouches);\n\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            all = uniqueArray(all.concat(changed), 'identifier', true);\n        }\n\n        return [all, changed];\n    }\n\n    var TOUCH_INPUT_MAP = {\n        touchstart: INPUT_START,\n        touchmove: INPUT_MOVE,\n        touchend: INPUT_END,\n        touchcancel: INPUT_CANCEL\n    };\n\n    var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n    /**\n     * Multi-user touch events input\n     * @constructor\n     * @extends Input\n     */\n    function TouchInput() {\n        this.evTarget = TOUCH_TARGET_EVENTS;\n        this.targetIds = {};\n\n        Input.apply(this, arguments);\n    }\n\n    inherit(TouchInput, Input, {\n        handler: function MTEhandler(ev) {\n            var type = TOUCH_INPUT_MAP[ev.type];\n            var touches = getTouches.call(this, ev, type);\n            if (!touches) {\n                return;\n            }\n\n            this.callback(this.manager, type, {\n                pointers: touches[0],\n                changedPointers: touches[1],\n                pointerType: INPUT_TYPE_TOUCH,\n                srcEvent: ev\n            });\n        }\n    });\n\n    /**\n     * @this {TouchInput}\n     * @param {Object} ev\n     * @param {Number} type flag\n     * @returns {undefined|Array} [all, changed]\n     */\n    function getTouches(ev, type) {\n        var allTouches = toArray(ev.touches);\n        var targetIds = this.targetIds;\n\n        // when there is only one touch, the process can be simplified\n        if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n            targetIds[allTouches[0].identifier] = true;\n            return [allTouches, allTouches];\n        }\n\n        var i,\n            targetTouches,\n            changedTouches = toArray(ev.changedTouches),\n            changedTargetTouches = [],\n            target = this.target;\n\n        // get target touches from touches\n        targetTouches = allTouches.filter(function (touch) {\n            return hasParent(touch.target, target);\n        });\n\n        // collect touches\n        if (type === INPUT_START) {\n            i = 0;\n            while (i < targetTouches.length) {\n                targetIds[targetTouches[i].identifier] = true;\n                i++;\n            }\n        }\n\n        // filter changed touches to only contain touches that exist in the collected target ids\n        i = 0;\n        while (i < changedTouches.length) {\n            if (targetIds[changedTouches[i].identifier]) {\n                changedTargetTouches.push(changedTouches[i]);\n            }\n\n            // cleanup removed touches\n            if (type & (INPUT_END | INPUT_CANCEL)) {\n                delete targetIds[changedTouches[i].identifier];\n            }\n            i++;\n        }\n\n        if (!changedTargetTouches.length) {\n            return;\n        }\n\n        return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true), changedTargetTouches];\n    }\n\n    /**\n     * Combined touch and mouse input\n     *\n     * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n     * This because touch devices also emit mouse events while doing a touch.\n     *\n     * @constructor\n     * @extends Input\n     */\n\n    var DEDUP_TIMEOUT = 2500;\n    var DEDUP_DISTANCE = 25;\n\n    function TouchMouseInput() {\n        Input.apply(this, arguments);\n\n        var handler = bindFn(this.handler, this);\n        this.touch = new TouchInput(this.manager, handler);\n        this.mouse = new MouseInput(this.manager, handler);\n\n        this.primaryTouch = null;\n        this.lastTouches = [];\n    }\n\n    inherit(TouchMouseInput, Input, {\n        /**\n         * handle mouse and touch events\n         * @param {Hammer} manager\n         * @param {String} inputEvent\n         * @param {Object} inputData\n         */\n        handler: function TMEhandler(manager, inputEvent, inputData) {\n            var isTouch = inputData.pointerType == INPUT_TYPE_TOUCH,\n                isMouse = inputData.pointerType == INPUT_TYPE_MOUSE;\n\n            if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n                return;\n            }\n\n            // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n            if (isTouch) {\n                recordTouches.call(this, inputEvent, inputData);\n            } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n                return;\n            }\n\n            this.callback(manager, inputEvent, inputData);\n        },\n\n        /**\n         * remove the event listeners\n         */\n        destroy: function destroy() {\n            this.touch.destroy();\n            this.mouse.destroy();\n        }\n    });\n\n    function recordTouches(eventType, eventData) {\n        if (eventType & INPUT_START) {\n            this.primaryTouch = eventData.changedPointers[0].identifier;\n            setLastTouch.call(this, eventData);\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            setLastTouch.call(this, eventData);\n        }\n    }\n\n    function setLastTouch(eventData) {\n        var touch = eventData.changedPointers[0];\n\n        if (touch.identifier === this.primaryTouch) {\n            var lastTouch = { x: touch.clientX, y: touch.clientY };\n            this.lastTouches.push(lastTouch);\n            var lts = this.lastTouches;\n            var removeLastTouch = function removeLastTouch() {\n                var i = lts.indexOf(lastTouch);\n                if (i > -1) {\n                    lts.splice(i, 1);\n                }\n            };\n            setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n        }\n    }\n\n    function isSyntheticEvent(eventData) {\n        var x = eventData.srcEvent.clientX,\n            y = eventData.srcEvent.clientY;\n        for (var i = 0; i < this.lastTouches.length; i++) {\n            var t = this.lastTouches[i];\n            var dx = Math.abs(x - t.x),\n                dy = Math.abs(y - t.y);\n            if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\n    var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n    // magical touchAction value\n    var TOUCH_ACTION_COMPUTE = 'compute';\n    var TOUCH_ACTION_AUTO = 'auto';\n    var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\n    var TOUCH_ACTION_NONE = 'none';\n    var TOUCH_ACTION_PAN_X = 'pan-x';\n    var TOUCH_ACTION_PAN_Y = 'pan-y';\n    var TOUCH_ACTION_MAP = getTouchActionProps();\n\n    /**\n     * Touch Action\n     * sets the touchAction property or uses the js alternative\n     * @param {Manager} manager\n     * @param {String} value\n     * @constructor\n     */\n    function TouchAction(manager, value) {\n        this.manager = manager;\n        this.set(value);\n    }\n\n    TouchAction.prototype = {\n        /**\n         * set the touchAction value on the element or enable the polyfill\n         * @param {String} value\n         */\n        set: function set(value) {\n            // find out the touch-action by the event handlers\n            if (value == TOUCH_ACTION_COMPUTE) {\n                value = this.compute();\n            }\n\n            if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n                this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n            }\n            this.actions = value.toLowerCase().trim();\n        },\n\n        /**\n         * just re-set the touchAction value\n         */\n        update: function update() {\n            this.set(this.manager.options.touchAction);\n        },\n\n        /**\n         * compute the value for the touchAction property based on the recognizer's settings\n         * @returns {String} value\n         */\n        compute: function compute() {\n            var actions = [];\n            each(this.manager.recognizers, function (recognizer) {\n                if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                    actions = actions.concat(recognizer.getTouchAction());\n                }\n            });\n            return cleanTouchActions(actions.join(' '));\n        },\n\n        /**\n         * this method is called on each input cycle and provides the preventing of the browser behavior\n         * @param {Object} input\n         */\n        preventDefaults: function preventDefaults(input) {\n            var srcEvent = input.srcEvent;\n            var direction = input.offsetDirection;\n\n            // if the touch action did prevented once this session\n            if (this.manager.session.prevented) {\n                srcEvent.preventDefault();\n                return;\n            }\n\n            var actions = this.actions;\n            var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n            var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n            var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n            if (hasNone) {\n                //do not prevent defaults if this is a tap gesture\n\n                var isTapPointer = input.pointers.length === 1;\n                var isTapMovement = input.distance < 2;\n                var isTapTouchTime = input.deltaTime < 250;\n\n                if (isTapPointer && isTapMovement && isTapTouchTime) {\n                    return;\n                }\n            }\n\n            if (hasPanX && hasPanY) {\n                // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n                return;\n            }\n\n            if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL || hasPanX && direction & DIRECTION_VERTICAL) {\n                return this.preventSrc(srcEvent);\n            }\n        },\n\n        /**\n         * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n         * @param {Object} srcEvent\n         */\n        preventSrc: function preventSrc(srcEvent) {\n            this.manager.session.prevented = true;\n            srcEvent.preventDefault();\n        }\n    };\n\n    /**\n     * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n     * @param {String} actions\n     * @returns {*}\n     */\n    function cleanTouchActions(actions) {\n        // none\n        if (inStr(actions, TOUCH_ACTION_NONE)) {\n            return TOUCH_ACTION_NONE;\n        }\n\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n        // if both pan-x and pan-y are set (different recognizers\n        // for different directions, e.g. horizontal pan but vertical swipe?)\n        // we need none (as otherwise with pan-x pan-y combined none of these\n        // recognizers will work, since the browser would handle all panning\n        if (hasPanX && hasPanY) {\n            return TOUCH_ACTION_NONE;\n        }\n\n        // pan-x OR pan-y\n        if (hasPanX || hasPanY) {\n            return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n        }\n\n        // manipulation\n        if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n            return TOUCH_ACTION_MANIPULATION;\n        }\n\n        return TOUCH_ACTION_AUTO;\n    }\n\n    function getTouchActionProps() {\n        if (!NATIVE_TOUCH_ACTION) {\n            return false;\n        }\n        var touchMap = {};\n        var cssSupports = window.CSS && window.CSS.supports;\n        ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function (val) {\n\n            // If css.supports is not supported but there is native touch-action assume it supports\n            // all values. This is the case for IE 10 and 11.\n            touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n        });\n        return touchMap;\n    }\n\n    /**\n     * Recognizer flow explained; *\n     * All recognizers have the initial state of POSSIBLE when a input session starts.\n     * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n     * Example session for mouse-input: mousedown -> mousemove -> mouseup\n     *\n     * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n     * which determines with state it should be.\n     *\n     * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n     * POSSIBLE to give it another change on the next cycle.\n     *\n     *               Possible\n     *                  |\n     *            +-----+---------------+\n     *            |                     |\n     *      +-----+-----+               |\n     *      |           |               |\n     *   Failed      Cancelled          |\n     *                          +-------+------+\n     *                          |              |\n     *                      Recognized       Began\n     *                                         |\n     *                                      Changed\n     *                                         |\n     *                                  Ended/Recognized\n     */\n    var STATE_POSSIBLE = 1;\n    var STATE_BEGAN = 2;\n    var STATE_CHANGED = 4;\n    var STATE_ENDED = 8;\n    var STATE_RECOGNIZED = STATE_ENDED;\n    var STATE_CANCELLED = 16;\n    var STATE_FAILED = 32;\n\n    /**\n     * Recognizer\n     * Every recognizer needs to extend from this class.\n     * @constructor\n     * @param {Object} options\n     */\n    function Recognizer(options) {\n        this.options = assign({}, this.defaults, options || {});\n\n        this.id = uniqueId();\n\n        this.manager = null;\n\n        // default is enable true\n        this.options.enable = ifUndefined(this.options.enable, true);\n\n        this.state = STATE_POSSIBLE;\n\n        this.simultaneous = {};\n        this.requireFail = [];\n    }\n\n    Recognizer.prototype = {\n        /**\n         * @virtual\n         * @type {Object}\n         */\n        defaults: {},\n\n        /**\n         * set options\n         * @param {Object} options\n         * @return {Recognizer}\n         */\n        set: function set(options) {\n            assign(this.options, options);\n\n            // also update the touchAction, in case something changed about the directions/enabled state\n            this.manager && this.manager.touchAction.update();\n            return this;\n        },\n\n        /**\n         * recognize simultaneous with an other recognizer.\n         * @param {Recognizer} otherRecognizer\n         * @returns {Recognizer} this\n         */\n        recognizeWith: function recognizeWith(otherRecognizer) {\n            if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n                return this;\n            }\n\n            var simultaneous = this.simultaneous;\n            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n            if (!simultaneous[otherRecognizer.id]) {\n                simultaneous[otherRecognizer.id] = otherRecognizer;\n                otherRecognizer.recognizeWith(this);\n            }\n            return this;\n        },\n\n        /**\n         * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n         * @param {Recognizer} otherRecognizer\n         * @returns {Recognizer} this\n         */\n        dropRecognizeWith: function dropRecognizeWith(otherRecognizer) {\n            if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n                return this;\n            }\n\n            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n            delete this.simultaneous[otherRecognizer.id];\n            return this;\n        },\n\n        /**\n         * recognizer can only run when an other is failing\n         * @param {Recognizer} otherRecognizer\n         * @returns {Recognizer} this\n         */\n        requireFailure: function requireFailure(otherRecognizer) {\n            if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n                return this;\n            }\n\n            var requireFail = this.requireFail;\n            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n            if (inArray(requireFail, otherRecognizer) === -1) {\n                requireFail.push(otherRecognizer);\n                otherRecognizer.requireFailure(this);\n            }\n            return this;\n        },\n\n        /**\n         * drop the requireFailure link. it does not remove the link on the other recognizer.\n         * @param {Recognizer} otherRecognizer\n         * @returns {Recognizer} this\n         */\n        dropRequireFailure: function dropRequireFailure(otherRecognizer) {\n            if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n                return this;\n            }\n\n            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n            var index = inArray(this.requireFail, otherRecognizer);\n            if (index > -1) {\n                this.requireFail.splice(index, 1);\n            }\n            return this;\n        },\n\n        /**\n         * has require failures boolean\n         * @returns {boolean}\n         */\n        hasRequireFailures: function hasRequireFailures() {\n            return this.requireFail.length > 0;\n        },\n\n        /**\n         * if the recognizer can recognize simultaneous with an other recognizer\n         * @param {Recognizer} otherRecognizer\n         * @returns {Boolean}\n         */\n        canRecognizeWith: function canRecognizeWith(otherRecognizer) {\n            return !!this.simultaneous[otherRecognizer.id];\n        },\n\n        /**\n         * You should use `tryEmit` instead of `emit` directly to check\n         * that all the needed recognizers has failed before emitting.\n         * @param {Object} input\n         */\n        emit: function emit(input) {\n            var self = this;\n            var state = this.state;\n\n            function emit(event) {\n                self.manager.emit(event, input);\n            }\n\n            // 'panstart' and 'panmove'\n            if (state < STATE_ENDED) {\n                emit(self.options.event + stateStr(state));\n            }\n\n            emit(self.options.event); // simple 'eventName' events\n\n            if (input.additionalEvent) {\n                // additional event(panleft, panright, pinchin, pinchout...)\n                emit(input.additionalEvent);\n            }\n\n            // panend and pancancel\n            if (state >= STATE_ENDED) {\n                emit(self.options.event + stateStr(state));\n            }\n        },\n\n        /**\n         * Check that all the require failure recognizers has failed,\n         * if true, it emits a gesture event,\n         * otherwise, setup the state to FAILED.\n         * @param {Object} input\n         */\n        tryEmit: function tryEmit(input) {\n            if (this.canEmit()) {\n                return this.emit(input);\n            }\n            // it's failing anyway\n            this.state = STATE_FAILED;\n        },\n\n        /**\n         * can we emit?\n         * @returns {boolean}\n         */\n        canEmit: function canEmit() {\n            var i = 0;\n            while (i < this.requireFail.length) {\n                if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                    return false;\n                }\n                i++;\n            }\n            return true;\n        },\n\n        /**\n         * update the recognizer\n         * @param {Object} inputData\n         */\n        recognize: function recognize(inputData) {\n            // make a new copy of the inputData\n            // so we can change the inputData without messing up the other recognizers\n            var inputDataClone = assign({}, inputData);\n\n            // is is enabled and allow recognizing?\n            if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n                this.reset();\n                this.state = STATE_FAILED;\n                return;\n            }\n\n            // reset when we've reached the end\n            if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n                this.state = STATE_POSSIBLE;\n            }\n\n            this.state = this.process(inputDataClone);\n\n            // the recognizer has recognized a gesture\n            // so trigger an event\n            if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n                this.tryEmit(inputDataClone);\n            }\n        },\n\n        /**\n         * return the state of the recognizer\n         * the actual recognizing happens in this method\n         * @virtual\n         * @param {Object} inputData\n         * @returns {Const} STATE\n         */\n        process: function process(inputData) {}, // jshint ignore:line\n\n        /**\n         * return the preferred touch-action\n         * @virtual\n         * @returns {Array}\n         */\n        getTouchAction: function getTouchAction() {},\n\n        /**\n         * called when the gesture isn't allowed to recognize\n         * like when another is being recognized or it is disabled\n         * @virtual\n         */\n        reset: function reset() {}\n    };\n\n    /**\n     * get a usable string, used as event postfix\n     * @param {Const} state\n     * @returns {String} state\n     */\n    function stateStr(state) {\n        if (state & STATE_CANCELLED) {\n            return 'cancel';\n        } else if (state & STATE_ENDED) {\n            return 'end';\n        } else if (state & STATE_CHANGED) {\n            return 'move';\n        } else if (state & STATE_BEGAN) {\n            return 'start';\n        }\n        return '';\n    }\n\n    /**\n     * direction cons to string\n     * @param {Const} direction\n     * @returns {String}\n     */\n    function directionStr(direction) {\n        if (direction == DIRECTION_DOWN) {\n            return 'down';\n        } else if (direction == DIRECTION_UP) {\n            return 'up';\n        } else if (direction == DIRECTION_LEFT) {\n            return 'left';\n        } else if (direction == DIRECTION_RIGHT) {\n            return 'right';\n        }\n        return '';\n    }\n\n    /**\n     * get a recognizer by name if it is bound to a manager\n     * @param {Recognizer|String} otherRecognizer\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer}\n     */\n    function getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n        var manager = recognizer.manager;\n        if (manager) {\n            return manager.get(otherRecognizer);\n        }\n        return otherRecognizer;\n    }\n\n    /**\n     * This recognizer is just used as a base for the simple attribute recognizers.\n     * @constructor\n     * @extends Recognizer\n     */\n    function AttrRecognizer() {\n        Recognizer.apply(this, arguments);\n    }\n\n    inherit(AttrRecognizer, Recognizer, {\n        /**\n         * @namespace\n         * @memberof AttrRecognizer\n         */\n        defaults: {\n            /**\n             * @type {Number}\n             * @default 1\n             */\n            pointers: 1\n        },\n\n        /**\n         * Used to check if it the recognizer receives valid input, like input.distance > 10.\n         * @memberof AttrRecognizer\n         * @param {Object} input\n         * @returns {Boolean} recognized\n         */\n        attrTest: function attrTest(input) {\n            var optionPointers = this.options.pointers;\n            return optionPointers === 0 || input.pointers.length === optionPointers;\n        },\n\n        /**\n         * Process the input and return the state for the recognizer\n         * @memberof AttrRecognizer\n         * @param {Object} input\n         * @returns {*} State\n         */\n        process: function process(input) {\n            var state = this.state;\n            var eventType = input.eventType;\n\n            var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n            var isValid = this.attrTest(input);\n\n            // on cancel input and we've recognized before, return STATE_CANCELLED\n            if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n                return state | STATE_CANCELLED;\n            } else if (isRecognized || isValid) {\n                if (eventType & INPUT_END) {\n                    return state | STATE_ENDED;\n                } else if (!(state & STATE_BEGAN)) {\n                    return STATE_BEGAN;\n                }\n                return state | STATE_CHANGED;\n            }\n            return STATE_FAILED;\n        }\n    });\n\n    /**\n     * Pan\n     * Recognized when the pointer is down and moved in the allowed direction.\n     * @constructor\n     * @extends AttrRecognizer\n     */\n    function PanRecognizer() {\n        AttrRecognizer.apply(this, arguments);\n\n        this.pX = null;\n        this.pY = null;\n    }\n\n    inherit(PanRecognizer, AttrRecognizer, {\n        /**\n         * @namespace\n         * @memberof PanRecognizer\n         */\n        defaults: {\n            event: 'pan',\n            threshold: 10,\n            pointers: 1,\n            direction: DIRECTION_ALL\n        },\n\n        getTouchAction: function getTouchAction() {\n            var direction = this.options.direction;\n            var actions = [];\n            if (direction & DIRECTION_HORIZONTAL) {\n                actions.push(TOUCH_ACTION_PAN_Y);\n            }\n            if (direction & DIRECTION_VERTICAL) {\n                actions.push(TOUCH_ACTION_PAN_X);\n            }\n            return actions;\n        },\n\n        directionTest: function directionTest(input) {\n            var options = this.options;\n            var hasMoved = true;\n            var distance = input.distance;\n            var direction = input.direction;\n            var x = input.deltaX;\n            var y = input.deltaY;\n\n            // lock to axis?\n            if (!(direction & options.direction)) {\n                if (options.direction & DIRECTION_HORIZONTAL) {\n                    direction = x === 0 ? DIRECTION_NONE : x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                    hasMoved = x != this.pX;\n                    distance = Math.abs(input.deltaX);\n                } else {\n                    direction = y === 0 ? DIRECTION_NONE : y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n                    hasMoved = y != this.pY;\n                    distance = Math.abs(input.deltaY);\n                }\n            }\n            input.direction = direction;\n            return hasMoved && distance > options.threshold && direction & options.direction;\n        },\n\n        attrTest: function attrTest(input) {\n            return AttrRecognizer.prototype.attrTest.call(this, input) && (this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input));\n        },\n\n        emit: function emit(input) {\n\n            this.pX = input.deltaX;\n            this.pY = input.deltaY;\n\n            var direction = directionStr(input.direction);\n\n            if (direction) {\n                input.additionalEvent = this.options.event + direction;\n            }\n            this._super.emit.call(this, input);\n        }\n    });\n\n    /**\n     * Pinch\n     * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n     * @constructor\n     * @extends AttrRecognizer\n     */\n    function PinchRecognizer() {\n        AttrRecognizer.apply(this, arguments);\n    }\n\n    inherit(PinchRecognizer, AttrRecognizer, {\n        /**\n         * @namespace\n         * @memberof PinchRecognizer\n         */\n        defaults: {\n            event: 'pinch',\n            threshold: 0,\n            pointers: 2\n        },\n\n        getTouchAction: function getTouchAction() {\n            return [TOUCH_ACTION_NONE];\n        },\n\n        attrTest: function attrTest(input) {\n            return this._super.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n        },\n\n        emit: function emit(input) {\n            if (input.scale !== 1) {\n                var inOut = input.scale < 1 ? 'in' : 'out';\n                input.additionalEvent = this.options.event + inOut;\n            }\n            this._super.emit.call(this, input);\n        }\n    });\n\n    /**\n     * Press\n     * Recognized when the pointer is down for x ms without any movement.\n     * @constructor\n     * @extends Recognizer\n     */\n    function PressRecognizer() {\n        Recognizer.apply(this, arguments);\n\n        this._timer = null;\n        this._input = null;\n    }\n\n    inherit(PressRecognizer, Recognizer, {\n        /**\n         * @namespace\n         * @memberof PressRecognizer\n         */\n        defaults: {\n            event: 'press',\n            pointers: 1,\n            time: 251, // minimal time of the pointer to be pressed\n            threshold: 9 // a minimal movement is ok, but keep it low\n        },\n\n        getTouchAction: function getTouchAction() {\n            return [TOUCH_ACTION_AUTO];\n        },\n\n        process: function process(input) {\n            var options = this.options;\n            var validPointers = input.pointers.length === options.pointers;\n            var validMovement = input.distance < options.threshold;\n            var validTime = input.deltaTime > options.time;\n\n            this._input = input;\n\n            // we only allow little movement\n            // and we've reached an end event, so a tap is possible\n            if (!validMovement || !validPointers || input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime) {\n                this.reset();\n            } else if (input.eventType & INPUT_START) {\n                this.reset();\n                this._timer = setTimeoutContext(function () {\n                    this.state = STATE_RECOGNIZED;\n                    this.tryEmit();\n                }, options.time, this);\n            } else if (input.eventType & INPUT_END) {\n                return STATE_RECOGNIZED;\n            }\n            return STATE_FAILED;\n        },\n\n        reset: function reset() {\n            clearTimeout(this._timer);\n        },\n\n        emit: function emit(input) {\n            if (this.state !== STATE_RECOGNIZED) {\n                return;\n            }\n\n            if (input && input.eventType & INPUT_END) {\n                this.manager.emit(this.options.event + 'up', input);\n            } else {\n                this._input.timeStamp = now();\n                this.manager.emit(this.options.event, this._input);\n            }\n        }\n    });\n\n    /**\n     * Rotate\n     * Recognized when two or more pointer are moving in a circular motion.\n     * @constructor\n     * @extends AttrRecognizer\n     */\n    function RotateRecognizer() {\n        AttrRecognizer.apply(this, arguments);\n    }\n\n    inherit(RotateRecognizer, AttrRecognizer, {\n        /**\n         * @namespace\n         * @memberof RotateRecognizer\n         */\n        defaults: {\n            event: 'rotate',\n            threshold: 0,\n            pointers: 2\n        },\n\n        getTouchAction: function getTouchAction() {\n            return [TOUCH_ACTION_NONE];\n        },\n\n        attrTest: function attrTest(input) {\n            return this._super.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n        }\n    });\n\n    /**\n     * Swipe\n     * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n     * @constructor\n     * @extends AttrRecognizer\n     */\n    function SwipeRecognizer() {\n        AttrRecognizer.apply(this, arguments);\n    }\n\n    inherit(SwipeRecognizer, AttrRecognizer, {\n        /**\n         * @namespace\n         * @memberof SwipeRecognizer\n         */\n        defaults: {\n            event: 'swipe',\n            threshold: 10,\n            velocity: 0.3,\n            direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n            pointers: 1\n        },\n\n        getTouchAction: function getTouchAction() {\n            return PanRecognizer.prototype.getTouchAction.call(this);\n        },\n\n        attrTest: function attrTest(input) {\n            var direction = this.options.direction;\n            var velocity;\n\n            if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n                velocity = input.overallVelocity;\n            } else if (direction & DIRECTION_HORIZONTAL) {\n                velocity = input.overallVelocityX;\n            } else if (direction & DIRECTION_VERTICAL) {\n                velocity = input.overallVelocityY;\n            }\n\n            return this._super.attrTest.call(this, input) && direction & input.offsetDirection && input.distance > this.options.threshold && input.maxPointers == this.options.pointers && abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n        },\n\n        emit: function emit(input) {\n            var direction = directionStr(input.offsetDirection);\n            if (direction) {\n                this.manager.emit(this.options.event + direction, input);\n            }\n\n            this.manager.emit(this.options.event, input);\n        }\n    });\n\n    /**\n     * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n     * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n     * a single tap.\n     *\n     * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n     * multi-taps being recognized.\n     * @constructor\n     * @extends Recognizer\n     */\n    function TapRecognizer() {\n        Recognizer.apply(this, arguments);\n\n        // previous time and center,\n        // used for tap counting\n        this.pTime = false;\n        this.pCenter = false;\n\n        this._timer = null;\n        this._input = null;\n        this.count = 0;\n    }\n\n    inherit(TapRecognizer, Recognizer, {\n        /**\n         * @namespace\n         * @memberof PinchRecognizer\n         */\n        defaults: {\n            event: 'tap',\n            pointers: 1,\n            taps: 1,\n            interval: 300, // max time between the multi-tap taps\n            time: 250, // max time of the pointer to be down (like finger on the screen)\n            threshold: 9, // a minimal movement is ok, but keep it low\n            posThreshold: 10 // a multi-tap can be a bit off the initial position\n        },\n\n        getTouchAction: function getTouchAction() {\n            return [TOUCH_ACTION_MANIPULATION];\n        },\n\n        process: function process(input) {\n            var options = this.options;\n\n            var validPointers = input.pointers.length === options.pointers;\n            var validMovement = input.distance < options.threshold;\n            var validTouchTime = input.deltaTime < options.time;\n\n            this.reset();\n\n            if (input.eventType & INPUT_START && this.count === 0) {\n                return this.failTimeout();\n            }\n\n            // we only allow little movement\n            // and we've reached an end event, so a tap is possible\n            if (validMovement && validTouchTime && validPointers) {\n                if (input.eventType != INPUT_END) {\n                    return this.failTimeout();\n                }\n\n                var validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;\n                var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n                this.pTime = input.timeStamp;\n                this.pCenter = input.center;\n\n                if (!validMultiTap || !validInterval) {\n                    this.count = 1;\n                } else {\n                    this.count += 1;\n                }\n\n                this._input = input;\n\n                // if tap count matches we have recognized it,\n                // else it has began recognizing...\n                var tapCount = this.count % options.taps;\n                if (tapCount === 0) {\n                    // no failing requirements, immediately trigger the tap event\n                    // or wait as long as the multitap interval to trigger\n                    if (!this.hasRequireFailures()) {\n                        return STATE_RECOGNIZED;\n                    } else {\n                        this._timer = setTimeoutContext(function () {\n                            this.state = STATE_RECOGNIZED;\n                            this.tryEmit();\n                        }, options.interval, this);\n                        return STATE_BEGAN;\n                    }\n                }\n            }\n            return STATE_FAILED;\n        },\n\n        failTimeout: function failTimeout() {\n            this._timer = setTimeoutContext(function () {\n                this.state = STATE_FAILED;\n            }, this.options.interval, this);\n            return STATE_FAILED;\n        },\n\n        reset: function reset() {\n            clearTimeout(this._timer);\n        },\n\n        emit: function emit() {\n            if (this.state == STATE_RECOGNIZED) {\n                this._input.tapCount = this.count;\n                this.manager.emit(this.options.event, this._input);\n            }\n        }\n    });\n\n    /**\n     * Simple way to create a manager with a default set of recognizers.\n     * @param {HTMLElement} element\n     * @param {Object} [options]\n     * @constructor\n     */\n    function Hammer(element, options) {\n        options = options || {};\n        options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n        return new Manager(element, options);\n    }\n\n    /**\n     * @const {string}\n     */\n    Hammer.VERSION = '2.0.8';\n\n    /**\n     * default settings\n     * @namespace\n     */\n    Hammer.defaults = {\n        /**\n         * set if DOM events are being triggered.\n         * But this is slower and unused by simple implementations, so disabled by default.\n         * @type {Boolean}\n         * @default false\n         */\n        domEvents: false,\n\n        /**\n         * The value for the touchAction property/fallback.\n         * When set to `compute` it will magically set the correct value based on the added recognizers.\n         * @type {String}\n         * @default compute\n         */\n        touchAction: TOUCH_ACTION_COMPUTE,\n\n        /**\n         * @type {Boolean}\n         * @default true\n         */\n        enable: true,\n\n        /**\n         * EXPERIMENTAL FEATURE -- can be removed/changed\n         * Change the parent input target element.\n         * If Null, then it is being set the to main element.\n         * @type {Null|EventTarget}\n         * @default null\n         */\n        inputTarget: null,\n\n        /**\n         * force an input class\n         * @type {Null|Function}\n         * @default null\n         */\n        inputClass: null,\n\n        /**\n         * Default recognizer setup when calling `Hammer()`\n         * When creating a new Manager these will be skipped.\n         * @type {Array}\n         */\n        preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, { enable: false }], [PinchRecognizer, { enable: false }, ['rotate']], [SwipeRecognizer, { direction: DIRECTION_HORIZONTAL }], [PanRecognizer, { direction: DIRECTION_HORIZONTAL }, ['swipe']], [TapRecognizer], [TapRecognizer, { event: 'doubletap', taps: 2 }, ['tap']], [PressRecognizer]],\n\n        /**\n         * Some CSS properties can be used to improve the working of Hammer.\n         * Add them to this method and they will be set when creating a new Manager.\n         * @namespace\n         */\n        cssProps: {\n            /**\n             * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n             * @type {String}\n             * @default 'none'\n             */\n            userSelect: 'none',\n\n            /**\n             * Disable the Windows Phone grippers when pressing an element.\n             * @type {String}\n             * @default 'none'\n             */\n            touchSelect: 'none',\n\n            /**\n             * Disables the default callout shown when you touch and hold a touch target.\n             * On iOS, when you touch and hold a touch target such as a link, Safari displays\n             * a callout containing information about the link. This property allows you to disable that callout.\n             * @type {String}\n             * @default 'none'\n             */\n            touchCallout: 'none',\n\n            /**\n             * Specifies whether zooming is enabled. Used by IE10>\n             * @type {String}\n             * @default 'none'\n             */\n            contentZooming: 'none',\n\n            /**\n             * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n             * @type {String}\n             * @default 'none'\n             */\n            userDrag: 'none',\n\n            /**\n             * Overrides the highlight color shown when the user taps a link or a JavaScript\n             * clickable element in iOS. This property obeys the alpha value, if specified.\n             * @type {String}\n             * @default 'rgba(0,0,0,0)'\n             */\n            tapHighlightColor: 'rgba(0,0,0,0)'\n        }\n    };\n\n    var STOP = 1;\n    var FORCED_STOP = 2;\n\n    /**\n     * Manager\n     * @param {HTMLElement} element\n     * @param {Object} [options]\n     * @constructor\n     */\n    function Manager(element, options) {\n        this.options = assign({}, Hammer.defaults, options || {});\n\n        this.options.inputTarget = this.options.inputTarget || element;\n\n        this.handlers = {};\n        this.session = {};\n        this.recognizers = [];\n        this.oldCssProps = {};\n\n        this.element = element;\n        this.input = createInputInstance(this);\n        this.touchAction = new TouchAction(this, this.options.touchAction);\n\n        toggleCssProps(this, true);\n\n        each(this.options.recognizers, function (item) {\n            var recognizer = this.add(new item[0](item[1]));\n            item[2] && recognizer.recognizeWith(item[2]);\n            item[3] && recognizer.requireFailure(item[3]);\n        }, this);\n    }\n\n    Manager.prototype = {\n        /**\n         * set options\n         * @param {Object} options\n         * @returns {Manager}\n         */\n        set: function set(options) {\n            assign(this.options, options);\n\n            // Options that need a little more setup\n            if (options.touchAction) {\n                this.touchAction.update();\n            }\n            if (options.inputTarget) {\n                // Clean up existing event listeners and reinitialize\n                this.input.destroy();\n                this.input.target = options.inputTarget;\n                this.input.init();\n            }\n            return this;\n        },\n\n        /**\n         * stop recognizing for this session.\n         * This session will be discarded, when a new [input]start event is fired.\n         * When forced, the recognizer cycle is stopped immediately.\n         * @param {Boolean} [force]\n         */\n        stop: function stop(force) {\n            this.session.stopped = force ? FORCED_STOP : STOP;\n        },\n\n        /**\n         * run the recognizers!\n         * called by the inputHandler function on every movement of the pointers (touches)\n         * it walks through all the recognizers and tries to detect the gesture that is being made\n         * @param {Object} inputData\n         */\n        recognize: function recognize(inputData) {\n            var session = this.session;\n            if (session.stopped) {\n                return;\n            }\n\n            // run the touch-action polyfill\n            this.touchAction.preventDefaults(inputData);\n\n            var recognizer;\n            var recognizers = this.recognizers;\n\n            // this holds the recognizer that is being recognized.\n            // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n            // if no recognizer is detecting a thing, it is set to `null`\n            var curRecognizer = session.curRecognizer;\n\n            // reset when the last recognizer is recognized\n            // or when we're in a new session\n            if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) {\n                curRecognizer = session.curRecognizer = null;\n            }\n\n            var i = 0;\n            while (i < recognizers.length) {\n                recognizer = recognizers[i];\n\n                // find out if we are allowed try to recognize the input for this one.\n                // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n                // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n                //      that is being recognized.\n                // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n                //      this can be setup with the `recognizeWith()` method on the recognizer.\n                if (session.stopped !== FORCED_STOP && ( // 1\n                !curRecognizer || recognizer == curRecognizer || // 2\n                recognizer.canRecognizeWith(curRecognizer))) {\n                    // 3\n                    recognizer.recognize(inputData);\n                } else {\n                    recognizer.reset();\n                }\n\n                // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n                // current active recognizer. but only if we don't already have an active recognizer\n                if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                    curRecognizer = session.curRecognizer = recognizer;\n                }\n                i++;\n            }\n        },\n\n        /**\n         * get a recognizer by its event name.\n         * @param {Recognizer|String} recognizer\n         * @returns {Recognizer|Null}\n         */\n        get: function get(recognizer) {\n            if (recognizer instanceof Recognizer) {\n                return recognizer;\n            }\n\n            var recognizers = this.recognizers;\n            for (var i = 0; i < recognizers.length; i++) {\n                if (recognizers[i].options.event == recognizer) {\n                    return recognizers[i];\n                }\n            }\n            return null;\n        },\n\n        /**\n         * add a recognizer to the manager\n         * existing recognizers with the same event name will be removed\n         * @param {Recognizer} recognizer\n         * @returns {Recognizer|Manager}\n         */\n        add: function add(recognizer) {\n            if (invokeArrayArg(recognizer, 'add', this)) {\n                return this;\n            }\n\n            // remove existing\n            var existing = this.get(recognizer.options.event);\n            if (existing) {\n                this.remove(existing);\n            }\n\n            this.recognizers.push(recognizer);\n            recognizer.manager = this;\n\n            this.touchAction.update();\n            return recognizer;\n        },\n\n        /**\n         * remove a recognizer by name or instance\n         * @param {Recognizer|String} recognizer\n         * @returns {Manager}\n         */\n        remove: function remove(recognizer) {\n            if (invokeArrayArg(recognizer, 'remove', this)) {\n                return this;\n            }\n\n            recognizer = this.get(recognizer);\n\n            // let's make sure this recognizer exists\n            if (recognizer) {\n                var recognizers = this.recognizers;\n                var index = inArray(recognizers, recognizer);\n\n                if (index !== -1) {\n                    recognizers.splice(index, 1);\n                    this.touchAction.update();\n                }\n            }\n\n            return this;\n        },\n\n        /**\n         * bind event\n         * @param {String} events\n         * @param {Function} handler\n         * @returns {EventEmitter} this\n         */\n        on: function on(events, handler) {\n            if (events === undefined) {\n                return;\n            }\n            if (handler === undefined) {\n                return;\n            }\n\n            var handlers = this.handlers;\n            each(splitStr(events), function (event) {\n                handlers[event] = handlers[event] || [];\n                handlers[event].push(handler);\n            });\n            return this;\n        },\n\n        /**\n         * unbind event, leave emit blank to remove all handlers\n         * @param {String} events\n         * @param {Function} [handler]\n         * @returns {EventEmitter} this\n         */\n        off: function off(events, handler) {\n            if (events === undefined) {\n                return;\n            }\n\n            var handlers = this.handlers;\n            each(splitStr(events), function (event) {\n                if (!handler) {\n                    delete handlers[event];\n                } else {\n                    handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n                }\n            });\n            return this;\n        },\n\n        /**\n         * emit event to the listeners\n         * @param {String} event\n         * @param {Object} data\n         */\n        emit: function emit(event, data) {\n            // we also want to trigger dom events\n            if (this.options.domEvents) {\n                triggerDomEvent(event, data);\n            }\n\n            // no handlers, so skip it all\n            var handlers = this.handlers[event] && this.handlers[event].slice();\n            if (!handlers || !handlers.length) {\n                return;\n            }\n\n            data.type = event;\n            data.preventDefault = function () {\n                data.srcEvent.preventDefault();\n            };\n\n            var i = 0;\n            while (i < handlers.length) {\n                handlers[i](data);\n                i++;\n            }\n        },\n\n        /**\n         * destroy the manager and unbinds all events\n         * it doesn't unbind dom events, that is the user own responsibility\n         */\n        destroy: function destroy() {\n            this.element && toggleCssProps(this, false);\n\n            this.handlers = {};\n            this.session = {};\n            this.input.destroy();\n            this.element = null;\n        }\n    };\n\n    /**\n     * add/remove the css properties as defined in manager.options.cssProps\n     * @param {Manager} manager\n     * @param {Boolean} add\n     */\n    function toggleCssProps(manager, add) {\n        var element = manager.element;\n        if (!element.style) {\n            return;\n        }\n        var prop;\n        each(manager.options.cssProps, function (value, name) {\n            prop = prefixed(element.style, name);\n            if (add) {\n                manager.oldCssProps[prop] = element.style[prop];\n                element.style[prop] = value;\n            } else {\n                element.style[prop] = manager.oldCssProps[prop] || '';\n            }\n        });\n        if (!add) {\n            manager.oldCssProps = {};\n        }\n    }\n\n    /**\n     * trigger dom event\n     * @param {String} event\n     * @param {Object} data\n     */\n    function triggerDomEvent(event, data) {\n        var gestureEvent = document.createEvent('Event');\n        gestureEvent.initEvent(event, true, true);\n        gestureEvent.gesture = data;\n        data.target.dispatchEvent(gestureEvent);\n    }\n\n    assign(Hammer, {\n        INPUT_START: INPUT_START,\n        INPUT_MOVE: INPUT_MOVE,\n        INPUT_END: INPUT_END,\n        INPUT_CANCEL: INPUT_CANCEL,\n\n        STATE_POSSIBLE: STATE_POSSIBLE,\n        STATE_BEGAN: STATE_BEGAN,\n        STATE_CHANGED: STATE_CHANGED,\n        STATE_ENDED: STATE_ENDED,\n        STATE_RECOGNIZED: STATE_RECOGNIZED,\n        STATE_CANCELLED: STATE_CANCELLED,\n        STATE_FAILED: STATE_FAILED,\n\n        DIRECTION_NONE: DIRECTION_NONE,\n        DIRECTION_LEFT: DIRECTION_LEFT,\n        DIRECTION_RIGHT: DIRECTION_RIGHT,\n        DIRECTION_UP: DIRECTION_UP,\n        DIRECTION_DOWN: DIRECTION_DOWN,\n        DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n        DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n        DIRECTION_ALL: DIRECTION_ALL,\n\n        Manager: Manager,\n        Input: Input,\n        TouchAction: TouchAction,\n\n        TouchInput: TouchInput,\n        MouseInput: MouseInput,\n        PointerEventInput: PointerEventInput,\n        TouchMouseInput: TouchMouseInput,\n        SingleTouchInput: SingleTouchInput,\n\n        Recognizer: Recognizer,\n        AttrRecognizer: AttrRecognizer,\n        Tap: TapRecognizer,\n        Pan: PanRecognizer,\n        Swipe: SwipeRecognizer,\n        Pinch: PinchRecognizer,\n        Rotate: RotateRecognizer,\n        Press: PressRecognizer,\n\n        on: addEventListeners,\n        off: removeEventListeners,\n        each: each,\n        merge: merge,\n        extend: extend,\n        assign: assign,\n        inherit: inherit,\n        bindFn: bindFn,\n        prefixed: prefixed\n    });\n\n    // this prevents errors when Hammer is loaded in the presence of an AMD\n    //  style loader but by script tag, not by the loader.\n    var freeGlobal = typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}; // jshint ignore:line\n    freeGlobal.Hammer = Hammer;\n\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n            return Hammer;\n        }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n})(window, document, 'Hammer');\n\n//# sourceURL=webpack:///./src/hammer.js?");

/***/ }),

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _data = __webpack_require__(/*! ./data.js */ \"./src/data.js\");\n\nvar _paRender = __webpack_require__(/*! ./pa.render.js */ \"./src/pa.render.js\");\n\nvar _paRender2 = _interopRequireDefault(_paRender);\n\nvar _paCalc = __webpack_require__(/*! ./pa.calc.js */ \"./src/pa.calc.js\");\n\nvar _paCalc2 = _interopRequireDefault(_paCalc);\n\nvar _prRender = __webpack_require__(/*! ./pr.render.js */ \"./src/pr.render.js\");\n\nvar _prRender2 = _interopRequireDefault(_prRender);\n\nvar _prCalc = __webpack_require__(/*! ./pr.calc.js */ \"./src/pr.calc.js\");\n\nvar _prCalc2 = _interopRequireDefault(_prCalc);\n\nvar _uRender = __webpack_require__(/*! ./u.render.js */ \"./src/u.render.js\");\n\nvar _uRender2 = _interopRequireDefault(_uRender);\n\nvar _uCalc = __webpack_require__(/*! ./u.calc.js */ \"./src/u.calc.js\");\n\nvar _uCalc2 = _interopRequireDefault(_uCalc);\n\nvar _windowsAPI = __webpack_require__(/*! ./windowsAPI.js */ \"./src/windowsAPI.js\");\n\nvar _windowsAPI2 = _interopRequireDefault(_windowsAPI);\n\nvar _shareAPI = __webpack_require__(/*! ./shareAPI.js */ \"./src/shareAPI.js\");\n\nvar _shareAPI2 = _interopRequireDefault(_shareAPI);\n\nvar _hammer = __webpack_require__(/*! ./hammer.js */ \"./src/hammer.js\");\n\nvar _hammer2 = _interopRequireDefault(_hammer);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Force HTTPS pour Service Worker //\nif (navigator.serviceWorker) {\n\tif (location.origin == 'http://192.168.1.10:5500') {\n\t\tconsole.log('Réseau local, https non requis, mais SW non activable');\n\t} else if (location.origin == 'http://127.0.0.1:5500') {\n\t\tconsole.log('Machine locale, https non requis, et SW activable');\n\t} else if (location.protocol == 'https:') {\n\t\tconsole.log('https déja activé');\n\t} else {\n\t\tconsole.log('Passage en https nécessaire');\n\t\tlocation.href = 'https:' + window.location.href.substring(window.location.protocol.length);\n\t}\n}\n\n// Import des données antérieure ou de base //\n\n(0, _data.readData)();\n\n// Applicationq //\n\n// Elements affichage a cibler //\n\nvar body = document.querySelector('#body');\nvar nav = document.querySelector('#nav');\nvar tabCalcPuisAct = document.getElementById(\"tabCalcPuisAct\");\nvar tabCalcPuisReact = document.getElementById(\"tabCalcPuisReact\");\nvar tabCalcTens = document.getElementById(\"tabCalcTens\");\nvar container = document.querySelector(\"#container\");\nvar menu = document.querySelector('#menu');\nvar theme = document.querySelector('#theme');\nvar footer = document.querySelector('#footer');\nvar tabCalcPuisActReduct = document.getElementById(\"tabCalcPuisActReduct\");\nvar tabCalcPuisReactReduct = document.getElementById(\"tabCalcPuisReactReduct\");\nvar tabCalcTensReduct = document.getElementById(\"tabCalcTensReduct\");\nvar burger = document.querySelector('#burger');\nvar menubtn = document.querySelector('#menubtn');\n// RAZ Bandeau //\n\nvar removeActive = function removeActive() {\n\t(0, _data.writeData)();\n\ttabCalcPuisAct.classList.remove(\"active\");\n\ttabCalcPuisReact.classList.remove(\"active\");\n\ttabCalcTens.classList.remove(\"active\");\n\ttabCalcPuisActReduct.classList.remove(\"active\");\n\ttabCalcPuisReactReduct.classList.remove(\"active\");\n\ttabCalcTensReduct.classList.remove(\"active\");\n};\n\n// Bascule Calculette Puissance Active //\n\nvar bascCalcPussAct = function bascCalcPussAct() {\n\t_data.data.start = \"calcpa\";\n\t(0, _paRender2.default)();\n\t(0, _paCalc2.default)();\n\tremoveActive();\n\ttabCalcPuisAct.classList.add(\"active\");\n\ttabCalcPuisActReduct.classList.add(\"active\");\n};\n\ntabCalcPuisAct.onclick = function () {\n\tbascCalcPussAct();\n};\n\ntabCalcPuisActReduct.onclick = function () {\n\tbascCalcPussAct();\n};\n\n// Bascule Calculette Puissance Reactive //\n\nvar bascCalcPussReact = function bascCalcPussReact() {\n\t_data.data.start = \"calcpr\";\n\t(0, _prRender2.default)();\n\t(0, _prCalc2.default)();\n\tremoveActive();\n\ttabCalcPuisReact.classList.add(\"active\");\n\ttabCalcPuisReactReduct.classList.add(\"active\");\n};\n\ntabCalcPuisReact.onclick = function () {\n\tbascCalcPussReact();\n};\n\ntabCalcPuisReactReduct.onclick = function () {\n\tbascCalcPussReact();\n};\n\n// Bascule Calculette Tension //\n\nvar bascCalcTens = function bascCalcTens() {\n\t_data.data.start = \"calctens\";\n\t(0, _uRender2.default)();\n\t(0, _uCalc2.default)();\n\tremoveActive();\n\ttabCalcTens.classList.add(\"active\");\n\ttabCalcTensReduct.classList.add(\"active\");\n};\n\ntabCalcTens.onclick = function () {\n\tbascCalcTens();\n};\n\ntabCalcTensReduct.onclick = function () {\n\tbascCalcTens();\n};\n\n// Lancement par défaut //\n\nswitch (_data.data.start) {\n\tcase \"calcpa\":\n\t\tbascCalcPussAct();\n\t\tbreak;\n\tcase \"calcpr\":\n\t\tbascCalcPussReact();\n\t\tbreak;\n\tcase \"calctens\":\n\t\tbascCalcTens();\n\t\tbreak;\n};\n\n// Gestion Panneau Menu //\n\n_data.data.timer = false;\n\nvar showMenu = function showMenu() {\n\tif (_data.data.timer == false) {\n\t\t_data.data.timer = true;\n\t\tmenu.classList.add(\"show\");\n\t\tmenubtn.classList.add(\"active\");\n\t\tsetTimeout(function () {\n\t\t\t_data.data.timer = false;\n\t\t\tmenu.classList.remove(\"show\");\n\t\t\tmenubtn.classList.remove(\"active\");\n\t\t}, 10000);\n\t} else {\n\t\tmenu.classList.add(\"show\");\n\t\tmenubtn.classList.add(\"active\");\n\t}\n};\n\nvar toggleMenu = function toggleMenu() {\n\tmenu.classList.toggle(\"show\");\n\tmenubtn.classList.toggle(\"active\");\n};\n\nvar hideMenu = function hideMenu() {\n\tmenu.classList.remove(\"show\");\n\tmenubtn.classList.remove(\"active\");\n};\n\nmenubtn.onclick = function (e) {\n\te.stopPropagation();\n\te.preventDefault();\n\tif (_data.data.timer == false) {\n\t\tshowMenu();\n\t} else {\n\t\ttoggleMenu();\n\t}\n};\n\nbody.onclick = function () {\n\thideMenu();\n};\n\nmenu.onclick = function (e) {\n\te.stopPropagation();\n\te.preventDefault();\n};\n\n// Gestion du tactile //\n\nvar hammertime = new _hammer2.default(container);\n\nhammertime.on('swiperight', function (e) {\n\tshowMenu();\n});\n\nhammertime.on('swipeleft', function (e) {\n\thideMenu();\n});\n\n// Passage en theme Dark si necessaire //\n\n// Si W10 ajout de la selection \"système\" //\"\n\nif (window.Windows) {\n\ttheme.innerHTML = '\\n\\t<option value=\"light\">Clair</option>\\n\\t<option value=\"dark\">Sombre</option>\\n\\t<option value=\"system\">Syst\\xE8me</option>\\n\\t';\n\tif (_data.data.themeselect == \"system\") {\n\t\t(0, _windowsAPI2.default)();\n\t}\n}\n\n// Application du thème //\n\nvar themeApply = function themeApply() {\n\tif (_data.data.theme == \"dark\") {\n\t\tbody.classList.add(\"darkmodecontainer\");\n\t\tnav.classList.add(\"darkmodenav\");\n\t\tmenu.classList.add(\"darkmodenav\");\n\t\tfooter.classList.add(\"darkmodenav\");\n\t} else {\n\t\tbody.classList.remove(\"darkmodecontainer\");\n\t\tnav.classList.remove(\"darkmodenav\");\n\t\tmenu.classList.remove(\"darkmodenav\");\n\t\tfooter.classList.remove(\"darkmodenav\");\n\t}\n};\n\n// Theme enregistré au lancement //\n\nthemeApply();\ntheme.value = _data.data.themeselect;\n\n// Selection du thème //\n\ntheme.addEventListener('change', function () {\n\t_data.data.themeselect = theme.value;\n\tif (_data.data.themeselect == \"light\") {\n\t\t_data.data.theme = \"light\";\n\t} else if (_data.data.themeselect == \"dark\") {\n\t\t_data.data.theme = \"dark\";\n\t} else if (_data.data.themeselect == \"system\") {\n\t\t// Vérification du  Theme Windows 10 //\n\t\t(0, _windowsAPI2.default)();\n\t};\n\t(0, _data.writeData)();\n\tthemeApply();\n});\n\n// Ajout de Share API si disponible (Androïd) //\n\n(0, _shareAPI2.default)();\n\n//This is the service worker with the Cache-first network\n\nif (navigator.serviceWorker) {\n\t//Add this below content to your HTML page, or add the js file to your page at the very top to register sercie worker\n\tif (navigator.serviceWorker.controller) {\n\t\tconsole.log(\"SW déja présent, inutile de l'enregister\");\n\t} else {\n\t\t//Register the ServiceWorker\n\t\twindow.addEventListener('load', function () {\n\t\t\tnavigator.serviceWorker.register('./sw.js', {\n\t\t\t\tscope: './'\n\t\t\t}).then(function (reg) {\n\t\t\t\tconsole.log('SW enregistré pour ce scope :' + reg.scope);\n\t\t\t});\n\t\t});\n\t}\n} else {\n\tconsole.log(\"SW indisponible avec ce Navigateur\");\n}\n\n//# sourceURL=webpack:///./src/main.js?");

/***/ }),

/***/ "./src/pa.calc.js":
/*!************************!*\
  !*** ./src/pa.calc.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _data = __webpack_require__(/*! ./data.js */ \"./src/data.js\");\n\nvar calcPuisAct = function calcPuisAct() {\n\n    var paHT = document.getElementById(\"paHT\");\n    var iaBT = document.getElementById(\"iaBT\");\n    var sma = document.getElementById(\"sma\");\n    var KU = document.getElementById(\"KU\");\n    var pTC = document.getElementById(\"pTC\");\n    var sTC = document.getElementById(\"sTC\");\n    var paMaxHT = document.getElementById(\"paMaxHT\");\n    var fpaHT = document.getElementById(\"fpaHT\");\n    var smaMin = document.getElementById(\"smaMin\");\n    var smaMax = document.getElementById(\"smaMax\");\n\n    KU.value = _data.data.KU;\n    pTC.value = _data.data.pTC;\n    sTC.value = _data.data.sTC;\n    fpaHT.value = _data.data.fpaHT;\n    paMaxHT.value = Math.round(_data.data.paMaxHT * 100) / 100;\n    smaMin.value = _data.data.smaMin;\n    smaMax.value = _data.data.smaMax;\n\n    // Calcul des constantes //\n\n    var calcConst = function calcConst() {\n\n        // Calculer les constantes //\n\n        var KI = pTC.value / sTC.value;\n        var KP = KU.value * KI;\n\n        // Stocker les datas constantes //\n\n        _data.data.KU = parseFloat(KU.value);\n        _data.data.KI = KI;\n        _data.data.KP = KP;\n        _data.data.pTC = parseFloat(pTC.value);\n        _data.data.sTC = parseFloat(sTC.value);\n        _data.data.smaMin = parseFloat(smaMin.value);\n        _data.data.smaMax = parseFloat(smaMax.value);\n        _data.data.smaPlage = (_data.data.smaMax - _data.data.smaMin) / 2;\n        _data.data.paMaxHT1 = 606.2 * KP / 1000000;\n        _data.data.paMaxHT2 = 744.8 * KP / 1000000;\n        _data.data.paMaxHT3 = 866 * KP / 1000000;\n        _data.data.paMaxHT4 = 1039 * KP / 1000000;\n        _data.data.paMaxHT5 = 1212 * KP / 1000000;\n        _data.data.paMaxHT6 = 1464 * KP / 1000000;\n        _data.data.paMaxHT8 = 1732 * KP / 1000000;\n        _data.data.paMaxHT9 = 2148 * KP / 1000000;\n\n        if (_data.data.fpaHT == 0) {\n            _data.data.paMaxHT = paMaxHT.value;\n            fpaHT.value = 0;\n        } else if (_data.data.fpaHT == 1) {\n            _data.data.paMaxHT = _data.data.paMaxHT1;\n            fpaHT.value = 1;\n        } else if (_data.data.fpaHT == 2) {\n            _data.data.paMaxHT = _data.data.paMaxHT2;\n            fpaHT.value = 2;\n        } else if (_data.data.fpaHT == 3) {\n            _data.data.paMaxHT = _data.data.paMaxHT3;\n            fpaHT.value = 3;\n        } else if (_data.data.fpaHT == 4) {\n            _data.data.paMaxHT = _data.data.paMaxHT4;\n            fpaHT.value = 4;\n        } else if (_data.data.fpaHT == 5) {\n            _data.data.paMaxHT = _data.data.paMaxHT5;\n            dfpaHT.value = 5;\n        } else if (_data.data.fpaHT == 6) {\n            _data.data.paMaxHT = _data.data.paMaxHT6;\n            fpaHT.value = 6;\n        } else if (_data.data.fpaHT == 7) {\n            _data.data.paMaxHT = _data.data.paMaxHT7;\n            fpaHT.value = 7;\n        } else if (_data.data.fpaHT == 8) {\n            _data.data.paMaxHT = _data.data.paMaxHT8;\n            fpaHT.value = 8;\n        } else if (_data.data.fpaHT == 9) {\n            _data.data.paMaxHT = _data.data.paMaxHT9;\n            fpaHT.value = 9;\n        };\n        (0, _data.writeData)();\n    };\n\n    // Actualisation du DOM sur changement de valeurs paramétres //\n\n    // Effacement Caculette //\n\n    var razAff = function razAff() {\n        paHT.placeholder = \"Entrez la valeur\";\n        paHT.value = \"\";\n        iaBT.placeholder = \"Entrez la valeur\";\n        iaBT.value = \"\";\n        sma.placeholder = \"Entrez la valeur\";\n        sma.value = \"\";\n        calcConst();\n        paMaxHT.value = Math.round(_data.data.paMaxHT * 100) / 100;\n    };\n\n    // DOM Actualisation //\n\n    KU.addEventListener('change', razAff);\n\n    pTC.addEventListener('change', razAff);\n\n    sTC.addEventListener('change', razAff);\n\n    smaMin.addEventListener('change', razAff);\n\n    smaMax.addEventListener('change', razAff);\n\n    fpaHT.addEventListener('change', function () {\n        _data.data.fpaHT = parseFloat(fpaHT.value);\n        razAff();\n    });\n\n    // Changement de plage réglée //\n\n    paMaxHT.addEventListener('change', function () {\n        _data.data.fpaHT = 0;\n        razAff();\n    });\n\n    // Calcul et affichage des valeurs de sorties //\n\n    paHT.addEventListener('change', function () {\n        calcConst();\n        _data.data.paHT = paHT.value * 1000000;\n        _data.data.iaBT = _data.data.paHT / (_data.data.KU * 100 * Math.sqrt(3)) / _data.data.KI;\n        _data.data.sma = _data.data.paHT / (_data.data.paMaxHT * 1000000 / _data.data.smaPlage) + (_data.data.smaMin + _data.data.smaMax) / 2;\n\n        iaBT.placeholder = Math.round(_data.data.iaBT * 1000) / 1000;\n        iaBT.value = Math.round(_data.data.iaBT * 1000) / 1000;\n        sma.placeholder = Math.round(_data.data.sma * 100) / 100;\n        sma.value = Math.round(_data.data.sma * 100) / 100;\n    });\n\n    iaBT.addEventListener('change', function () {\n        calcConst();\n        _data.data.iaBT = iaBT.value;\n        _data.data.paHT = _data.data.iaBT * _data.data.KI * (_data.data.KU * 100) * Math.sqrt(3);\n        _data.data.sma = _data.data.paHT / (_data.data.paMaxHT * 1000000 / _data.data.smaPlage) + (_data.data.smaMin + _data.data.smaMax) / 2;\n\n        paHT.placeholder = Math.round(_data.data.paHT / 10000) / 100;\n        paHT.value = Math.round(_data.data.paHT / 10000) / 100;\n        sma.placeholder = Math.round(_data.data.sma * 100) / 100;\n        sma.value = Math.round(_data.data.sma * 100) / 100;\n    });\n\n    sma.addEventListener('change', function () {\n        calcConst();\n        _data.data.sma = sma.value - (_data.data.smaMin + _data.data.smaMax) / 2;\n        _data.data.paHT = _data.data.sma * (_data.data.paMaxHT * 1000000 / _data.data.smaPlage);\n        _data.data.iaBT = _data.data.sma * (_data.data.paMaxHT * 1000000 / _data.data.smaPlage) / (_data.data.KU * 100 * Math.sqrt(3)) / _data.data.KI;\n\n        paHT.placeholder = Math.round(_data.data.paHT / 10000) / 100;\n        paHT.value = Math.round(_data.data.paHT / 10000) / 100;\n        iaBT.placeholder = Math.round(_data.data.iaBT * 1000) / 1000;\n        iaBT.value = Math.round(_data.data.iaBT * 1000) / 1000;\n    });\n};\n\nexports.default = calcPuisAct;\n\n//# sourceURL=webpack:///./src/pa.calc.js?");

/***/ }),

/***/ "./src/pa.render.js":
/*!**************************!*\
  !*** ./src/pa.render.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _data = __webpack_require__(/*! ./data.js */ \"./src/data.js\");\n\nvar renderPuisAct = function renderPuisAct() {\n    container.innerHTML = '\\n<div class=\"intercal\">\\n    <p class=\"mb-1\">\\n        <a>Calcul des valeurs pour 100/\\u221A3 V \\u03C6=0\\xB0</a>\\n    </p>\\n    \\n    <div class=\"input-group mb-2\">\\n        <div class=\"input-group-prepend\">\\n            <label class=\"input-group-text text-light bg-secondary\">Puissance HT</label>\\n        </div>\\n        <input type=\"number\" id=\"paHT\" placeholder=\"Entrez la valeur\" class=\"form-control\" aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\">\\n        <div class=\"input-group-append\">\\n    <span class=\"input-group-text text-light bg-secondary\">MW</span>\\n        </div>\\n    </div>\\n\\n    <div class=\"input-group mb-2\">\\n        <div class=\"input-group-prepend\">\\n           <label class=\"input-group-text text-light bg-primary\">Courant BT</label>\\n        </div>\\n            <input type=\"number\" id=\"iaBT\" placeholder=\"Entrez la valeur\" class=\"form-control\" aria-label=\"Small\"\\n        aria-describedby=\"inputGroup-sizing-sm\">\\n        <div class=\"input-group-append\">\\n           <span class=\"input-group-text text-light bg-primary\">A</span>\\n        </div>\\n    </div>\\n\\n    <div class=\"input-group mb-2\">\\n        <div class=\"input-group-prepend\">\\n            <label class=\"input-group-text text-light bg-success\">Sortie proc\\xE9d\\xE9</label>\\n        </div>\\n            <input type=\"number\" id=\"sma\" placeholder=\"Entrez la valeur\" class=\"form-control\" aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\">\\n        <div class=\"input-group-append\">\\n        <span class=\"input-group-text text-light bg-success\">mA</span>\\n        </div>\\n    </div>\\n</div>\\n\\n<div class=\"intercal\">\\n<p class=\"mb-1\">\\n    <a>Param\\xE8tres</a>\\n</p>\\n\\n<div class=\"input-group mb-2\">\\n    <div class=\"input-group-prepend\">\\n        <label for \"KU\" class=\"input-group-text\">Tension HT / BT</label>\\n    </div>\\n    <select id=\\'KU\\' class=\"custom-select\" value=\"\">\\n    <option value=\"200\">20 kV / 100 V</option>\\n    <option value=\"450\">45 kV / 100 V</option>\\n    <option value=\"600\">60 kV / 100V</option>\\n    <option value=\"630\">63 kV / 100V</option>\\n    <option value=\"900\">90 kV / 100 V</option>\\n    <option value=\"1500\">150 kV / 100V</option>\\n    <option value=\"2200\">220 kV / 100V</option>\\n    <option value=\"2250\">225 kV / 100V</option>\\n    <option value=\"4000\">400 kV / 100V</option>\\n    </select>\\n</div>\\n\\n<div class=\"input-group mb-2\">\\n    <div class=\"input-group-prepend\">\\n        <label class=\"input-group-text\" for=\"pTC\">Courant primaire TC</label>\\n    </div>\\n    <input class=\"form-control\" aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\" id=\\'pTC\\' type=\"number\" value=\"\" />\\n    <div class=\"input-group-append\">\\n        <label class=\"input-group-text\" for=\"pTC\">A</label>\\n    </div>\\n</div>\\n\\n<div class=\"input-group mb-2\">\\n    <div class=\"input-group-prepend\">\\n        <label for=\"sTC\" class=\"input-group-text\">Secondaire TC</label>\\n    </div>\\n    <select class=\"custom-select\" id=\\'sTC\\'>\\n        <option value=\"1\">Circuit 1 A</option>\\n        <option value=\"5\">Circuit 5 A</option>\\n    </select>\\n</div>\\n\\n<div class=\"input-group mb-2\">\\n    <div class=\"input-group-prepend\">\\n        <label class=\"input-group-text\" for=\"fpaHT\">Famille BT</label>\\n    </div>\\n    <select id=\"fpaHT\" class=\"custom-select\" value=\"\">\\n        <option value=\"0\">Plage r\\xE9gl\\xE9e</option>\\n        <option value=\"1\">P1 602,2</option>\\n        <option value=\"2\">P2 744,8</option>\\n        <option value=\"3\">P3 866</option>\\n        <option value=\"4\">P4 1039</option>\\n        <option value=\"5\">P5 1212</option>\\n        <option value=\"6\">P6 1464</option>\\n        <option value=\"8\">P8 1732</option>\\n        <option value=\"9\">P9 2148</option>\\n    </select>\\n    <div class=\"input-group-append\">\\n        <span class=\"input-group-text\">\\xB1 W</span>\\n    </div>\\n</div>\\n<div class=\"input-group mb-2\">\\n    <div class=\"input-group-prepend\">\\n        <label class=\"input-group-text\" for=\"paMaxHT\">Plage HT r\\xE9gl\\xE9e</label>\\n    </div>\\n    <input class=\"form-control\" aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\" id=\\'paMaxHT\\' type=\"number\" value=\"\" />\\n    <div class=\"input-group-append\">\\n        <span class=\"input-group-text\">\\xB1 MW</span>\\n    </div>\\n</div>\\n\\n<div class=\"input-group mb-2\">\\n    <div class=\"input-group-prepend\">\\n        <label for \"smaMin\" class=\"input-group-text\">Sortie</label>\\n    </div>\\n    <select id=\\'smaMin\\' class=\"custom-select\" value=\"\">\\n    <option value=\"-20\">-20</option>\\n    <option value=\"-10\">-10</option>\\n    <option value=\"-5\">-5</option>\\n    <option value=\"0\">0</option>\\n    <option value=\"4\">4</option>\\n    </select>\\n    <span class=\"input-group-text input-group-middle\">\\xE0</span>\\n    <select id=\\'smaMax\\' class=\"custom-select\" value=\"\">\\n    <option value=\"5\">5</option>\\n    <option value=\"10\">10</option>\\n    <option value=\"20\">20</option>\\n    </select>\\n    <div class=\"input-group-append\">\\n    <span class=\"input-group-text\">mA</span>\\n</div>\\n</div>\\n</div>\\n ';\n};\n\nexports.default = renderPuisAct;\n\n//# sourceURL=webpack:///./src/pa.render.js?");

/***/ }),

/***/ "./src/pr.calc.js":
/*!************************!*\
  !*** ./src/pr.calc.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _data = __webpack_require__(/*! ./data.js */ \"./src/data.js\");\n\nvar calcPuisReact = function calcPuisReact() {\n\n    var prHT = document.getElementById(\"prHT\");\n    var irBT = document.getElementById(\"irBT\");\n    var sma = document.getElementById(\"sma\");\n    var KU = document.getElementById(\"KU\");\n    var pTC = document.getElementById(\"pTC\");\n    var sTC = document.getElementById(\"sTC\");\n    var prMaxHT = document.getElementById(\"prMaxHT\");\n    var fprHT = document.getElementById(\"fprHT\");\n    var smaMin = document.getElementById(\"smaMin\");\n    var smaMax = document.getElementById(\"smaMax\");\n\n    KU.value = _data.data.KU;\n    pTC.value = _data.data.pTC;\n    sTC.value = _data.data.sTC;\n    fprHT.value = _data.data.fprHT;\n    prMaxHT.value = Math.round(_data.data.prMaxHT * 100) / 100;\n    smaMin.value = _data.data.smaMin;\n    smaMax.value = _data.data.smaMax;\n\n    // Calcul des constantes //\n\n    var calcConst = function calcConst() {\n\n        // Calculer les constantes //\n\n        var KI = pTC.value / sTC.value;\n        var KP = KU.value * KI;\n\n        // Stocker les datas constantes //\n\n        _data.data.KU = parseFloat(KU.value);\n        _data.data.KI = KI;\n        _data.data.KP = KP;\n        _data.data.pTC = parseFloat(pTC.value);\n        _data.data.sTC = parseFloat(sTC.value);\n        _data.data.smaMin = parseFloat(smaMin.value);\n        _data.data.smaMax = parseFloat(smaMax.value);\n        _data.data.smaPlage = (_data.data.smaMax - _data.data.smaMin) / 2;\n        _data.data.prMaxHT1 = 303.1 * KP / 1000000;\n        _data.data.prMaxHT2 = 372.4 * KP / 1000000;\n        _data.data.prMaxHT3 = 433 * KP / 1000000;\n        _data.data.prMaxHT4 = 519.6 * KP / 1000000;\n        _data.data.prMaxHT5 = 606.2 * KP / 1000000;\n        _data.data.prMaxHT6 = 848.7 * KP / 1000000;\n        _data.data.prMaxHT7 = 731.8 * KP / 1000000;\n        _data.data.prMaxHT8 = 866 * KP / 1000000;\n        _data.data.prMaxHT9 = 1074 * KP / 1000000;\n\n        if (_data.data.fprHT == 0) {\n            _data.data.prMaxHT = prMaxHT.value;\n            fprHT.value = 0;\n        } else if (_data.data.fprHT == 1) {\n            _data.data.prMaxHT = _data.data.prMaxHT1;\n            fprHT.value = 1;\n        } else if (_data.data.fprHT == 2) {\n            _data.data.prMaxHT = _data.data.prMaxHT2;\n            fprHT.value = 2;\n        } else if (_data.data.fprHT == 3) {\n            _data.data.prMaxHT = _data.data.prMaxHT3;\n            fprHT.value = 3;\n        } else if (_data.data.fprHT == 4) {\n            _data.data.prMaxHT = _data.data.prMaxHT4;\n            fprHT.value = 4;\n        } else if (_data.data.fprHT == 5) {\n            _data.data.prMaxHT = _data.data.prMaxHT5;\n            fprHT.value = 5;\n        } else if (_data.data.fprHT == 6) {\n            _data.data.prMaxHT = _data.data.prMaxHT6;\n            fprHT.value = 6;\n        } else if (_data.data.fprHT == 7) {\n            _data.data.prMaxHT = _data.data.prMaxHT7;\n            fprHT.value = 7;\n        } else if (_data.data.fprHT == 8) {\n            _data.data.prMaxHT = _data.data.prMaxHT8;\n            fprHT.value = 8;\n        } else if (_data.data.fprHT == 9) {\n            _data.data.prMaxHT = _data.data.prMaxHT9;\n            fprHT.value = 9;\n        };\n        (0, _data.writeData)();\n    };\n\n    // Actualisation du DOM sur changement de valeurs paramétres //\n\n    // Effacement Caculette //\n\n    var razAff = function razAff() {\n        prHT.placeholder = \"Entrez la valeur\";\n        prHT.value = \"\";\n        irBT.placeholder = \"Entrez la valeur\";\n        irBT.value = \"\";\n        sma.placeholder = \"Entrez la valeur\";\n        sma.value = \"\";\n        calcConst();\n        prMaxHT.value = Math.round(_data.data.prMaxHT * 100) / 100;\n    };\n\n    // DOM Actualisation //\n\n    KU.addEventListener('change', razAff);\n\n    pTC.addEventListener('change', razAff);\n\n    sTC.addEventListener('change', razAff);\n\n    smaMin.addEventListener('change', razAff);\n\n    smaMax.addEventListener('change', razAff);\n\n    fprHT.addEventListener('change', function () {\n        _data.data.fprHT = parseFloat(fprHT.value);\n        razAff();\n    });\n\n    // Changement de plage réglée //\n\n    prMaxHT.addEventListener('change', function () {\n        _data.data.fprHT = 0;\n        razAff();\n    });\n\n    // Calcul et affichage des valeurs de sorties //\n\n    prHT.addEventListener('change', function () {\n        calcConst();\n        _data.data.prHT = prHT.value * 1000000;\n        _data.data.irBT = _data.data.prHT / (_data.data.KU * 100 * Math.sqrt(3)) / _data.data.KI;\n        _data.data.sma = _data.data.prHT / (_data.data.prMaxHT * 1000000 / _data.data.smaPlage) + (_data.data.smaMin + _data.data.smaMax) / 2;\n\n        irBT.placeholder = Math.round(_data.data.irBT * 1000) / 1000;\n        irBT.value = Math.round(_data.data.irBT * 1000) / 1000;\n        sma.placeholder = Math.round(_data.data.sma * 100) / 100;\n        sma.value = Math.round(_data.data.sma * 100) / 100;\n    });\n\n    irBT.addEventListener('change', function () {\n        calcConst();\n        _data.data.irBT = irBT.value;\n        _data.data.prHT = _data.data.irBT * _data.data.KI * (_data.data.KU * 100) * Math.sqrt(3);\n        _data.data.sma = _data.data.prHT / (_data.data.prMaxHT * 1000000 / _data.data.smaPlage) + (_data.data.smaMin + _data.data.smaMax) / 2;\n\n        prHT.placeholder = Math.round(_data.data.prHT / 10000) / 100;\n        prHT.value = Math.round(_data.data.prHT / 10000) / 100;\n        sma.placeholder = Math.round(_data.data.sma * 100) / 100;\n        sma.value = Math.round(_data.data.sma * 100) / 100;\n    });\n\n    sma.addEventListener('change', function () {\n        calcConst();\n        _data.data.sma = sma.value - (_data.data.smaMin + _data.data.smaMax) / 2;\n        _data.data.prHT = _data.data.sma * (_data.data.prMaxHT * 1000000 / _data.data.smaPlage);\n        _data.data.irBT = _data.data.sma * (_data.data.prMaxHT * 1000000 / _data.data.smaPlage) / (_data.data.KU * 100 * Math.sqrt(3)) / _data.data.KI;\n\n        prHT.placeholder = Math.round(_data.data.prHT / 10000) / 100;\n        prHT.value = Math.round(_data.data.prHT / 10000) / 100;\n        irBT.placeholder = Math.round(_data.data.irBT * 1000) / 1000;\n        irBT.value = Math.round(_data.data.irBT * 1000) / 1000;\n    });\n};\n\nexports.default = calcPuisReact;\n\n//# sourceURL=webpack:///./src/pr.calc.js?");

/***/ }),

/***/ "./src/pr.render.js":
/*!**************************!*\
  !*** ./src/pr.render.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _data = __webpack_require__(/*! ./data.js */ \"./src/data.js\");\n\nvar renderPuisReact = function renderPuisReact() {\n    container.innerHTML = '\\n    <div class=\"intercal\">\\n    <p class=\"mb-1\">\\n    <a>Calcul des valeurs pour 100/\\u221A3 V \\u03C6=90\\xB0</a>\\n</p>\\n\\n<div class=\"input-group mb-2\">\\n    <div class=\"input-group-prepend\">\\n        <label class=\"input-group-text text-light bg-secondary\">Puissance HT</label>\\n    </div>\\n    <input type=\"number\" id=\"prHT\" placeholder=\"Entrez la valeur\" class=\"form-control\" aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\">\\n    <div class=\"input-group-append\">\\n        <span class=\"input-group-text text-light bg-secondary\">Mvar</span>\\n    </div>\\n</div>\\n\\n<div class=\"input-group mb-2\">\\n    <div class=\"input-group-prepend\">\\n        <label class=\"input-group-text text-light bg-primary\">Courant BT</label>\\n    </div>\\n    <input type=\"number\" id=\"irBT\" placeholder=\"Entrez la valeur\" class=\"form-control\" aria-label=\"Small\"\\n        aria-describedby=\"inputGroup-sizing-sm\">\\n    <div class=\"input-group-append\">\\n        <span class=\"input-group-text text-light bg-primary\">A</span>\\n    </div>\\n</div>\\n\\n<div class=\"input-group mb-2\">\\n    <div class=\"input-group-prepend\">\\n        <label class=\"input-group-text text-light bg-success\">Sortie proc\\xE9d\\xE9</label>\\n    </div>\\n    <input type=\"number\" id=\"sma\" placeholder=\"Entrez la valeur\" class=\"form-control\" aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\">\\n    <div class=\"input-group-append\">\\n        <span class=\"input-group-text text-light bg-success\">mA</span>\\n    </div>\\n</div>\\n</div>\\n<div class=\"intercal\">\\n<p class=\"mb-1\">\\n    <a>Param\\xE8tres</a>\\n</p>\\n\\n<div class=\"input-group mb-2\">\\n    <div class=\"input-group-prepend\">\\n        <label for \"KU\" class=\"input-group-text\">Tension HT / BT</label>\\n    </div>\\n    <select id=\"KU\" class=\"custom-select\" value=\"\">\\n    <option value=\"200\">20 kV / 100 V</option>\\n    <option value=\"450\">45 kV / 100 V</option>\\n    <option value=\"600\">60 kV / 100V</option>\\n    <option value=\"630\">63 kV / 100V</option>\\n    <option value=\"900\">90 kV / 100 V</option>\\n    <option value=\"1500\">150 kV / 100V</option>\\n    <option value=\"2200\">220 kV / 100V</option>\\n    <option value=\"2250\">225 kV / 100V</option>\\n    <option value=\"4000\">400 kV / 100V</option>\\n    </select>\\n</div>\\n\\n<div class=\"input-group mb-2\">\\n    <div class=\"input-group-prepend\">\\n        <label class=\"input-group-text\" for=\"pTC\">Courant primaire TC</label>\\n    </div>\\n    <input class=\"form-control\" aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\" id=\"pTC\" type=\"number\" value=\"\"\\n    />\\n    <div class=\"input-group-append\">\\n        <label class=\"input-group-text\" for=\"pTC\">A</label>\\n    </div>\\n</div>\\n\\n<div class=\"input-group mb-2\">\\n    <div class=\"input-group-prepend\">\\n        <label for=\"sTC\" class=\"input-group-text\">Secondaire TC</label>\\n    </div>\\n    <select class=\"custom-select\" id=\"sTC\">\\n    <option value=\"1\">Circuit 1 A</option>\\n    <option value=\"5\">Circuit 5 A</option>\\n    </select>\\n</div>\\n\\n<div class=\"input-group mb-2\">\\n    <div class=\"input-group-prepend\">\\n        <label class=\"input-group-text\" for=\"fprHT\">Famille BT</label>\\n    </div>\\n    <select id=\"fprHT\" class=\"custom-select\" value=\"\">\\n        <option value=\"0\">Plage r\\xE9gl\\xE9e</option>\\n        <option value=\"1\">Q1 303,1</option>\\n        <option value=\"2\">Q2 372,4</option>\\n        <option value=\"3\">Q3 433</option>\\n        <option value=\"4\">Q4 519,6</option>\\n        <option value=\"5\">Q5 602,2</option>\\n        <option value=\"6\">Q6 848,7</option>\\n        <option value=\"7\">Q7 731,8</option>\\n        <option value=\"8\">Q8 866</option>\\n        <option value=\"9\">Q9 1074</option>\\n    </select>\\n    <div class=\"input-group-append\">\\n        <span class=\"input-group-text\">\\xB1 var</span>\\n    </div>\\n</div>\\n<div class=\"input-group mb-2\">\\n    <div class=\"input-group-prepend\">\\n        <label class=\"input-group-text\" for=\"prMaxHT\">Plage HT r\\xE9gl\\xE9e</label>\\n    </div>\\n    <input class=\"form-control\" aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\" id=\\'prMaxHT\\' type=\"number\" value=\"\" />\\n    <div class=\"input-group-append\">\\n        <span class=\"input-group-text\">\\xB1 Mvar</span>\\n    </div>\\n</div>\\n\\n<div class=\"input-group mb-2\">\\n<div class=\"input-group-prepend\">\\n    <label for \"smaMin\" class=\"input-group-text\">Sortie</label>\\n</div>\\n<select id=\\'smaMin\\' class=\"custom-select\" value=\"\">\\n<option value=\"-20\">-20</option>\\n<option value=\"-10\">-10</option>\\n<option value=\"-5\">-5</option>\\n<option value=\"0\">0</option>\\n<option value=\"4\">4</option>\\n</select>\\n<span class=\"input-group-text input-group-middle\">\\xE0</span>\\n<select id=\\'smaMax\\' class=\"custom-select\" value=\"\">\\n<option value=\"5\">5</option>\\n<option value=\"10\">10</option>\\n<option value=\"20\">20</option>\\n</select>\\n<div class=\"input-group-append\">\\n<span class=\"input-group-text\">mA</span>\\n</div>\\n</div>\\n</div>\\n ';\n};\n\nexports.default = renderPuisReact;\n\n//# sourceURL=webpack:///./src/pr.render.js?");

/***/ }),

/***/ "./src/shareAPI.js":
/*!*************************!*\
  !*** ./src/shareAPI.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n// Ajout Share API standard W3C //\n\nvar shareAPI = function shareAPI() {\n\n    var menulist = document.querySelector('#menulist');\n\n    if (navigator.share) {\n\n        var li = document.createElement('li');\n        li.classList.add(\"m-4\");\n        li.innerHTML = '<button class=\"btn btn-dark\" onClick=\"\" type=\"button\" id=\"sharebtn\">\\n        <i class=\"fa fa-share\" aria-hidden=\"true\"></i>\\n    </button>\\n    <a>Partager</a>\\n    ';\n        menulist.append(li);\n\n        var renderShare = '<li><button class=\"btn btn-dark\" onClick=\"\" type=\"button\" id=\"shareBtn\">\\n        <i class=\"fa fa-share\" aria-hidden=\"true\"></i>\\n    </button>\\n    <a>Partager l\\'application</a>\\n    </li>';\n\n        var shareButton = document.querySelector('#sharebtn');\n\n        shareButton.onclick = function (e) {\n            e.preventDefault();\n            navigator.share({\n                title: 'Transducteur',\n                text: 'Une calculette pratique pour les capteurs de mesure',\n                url: window.location.href\n            }).then(function () {\n                console.log('Thanks for sharing!');\n            }).catch(function (err) {\n                console.log('Couldn\\'t share because of', err.message);\n            });\n        };\n    } else {\n        console.log('Share API W3C not supported');\n    }\n};\n\nexports.default = shareAPI;\n\n//# sourceURL=webpack:///./src/shareAPI.js?");

/***/ }),

/***/ "./src/u.calc.js":
/*!***********************!*\
  !*** ./src/u.calc.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _data = __webpack_require__(/*! ./data.js */ \"./src/data.js\");\n\nvar calcTens = function calcTens() {\n\n    // Liaison avec le DOM //\n\n    var vHT = document.getElementById(\"vHT\");\n    var uHT = document.getElementById(\"uHT\");\n    var vBT = document.getElementById(\"vBT\");\n    var vsma = document.getElementById(\"vsma\");\n    var fuHT = document.getElementById(\"fuHT\");\n    var KU = document.getElementById(\"KU\");\n    var uMin = document.getElementById(\"uMin\");\n    var uMax = document.getElementById(\"uMax\");\n    var smaMinU = document.getElementById(\"smaMinU\");\n    var smaMaxU = document.getElementById(\"smaMaxU\");\n\n    KU.value = _data.data.KU;\n    fuHT.value = _data.data.fuHT;\n    uMin.value = _data.data.uMin;\n    uMax.value = _data.data.uMax;\n    smaMinU.value = _data.data.smaMinU;\n    smaMaxU.value = _data.data.smaMaxU;\n\n    // Calcul des constantes //\n\n    function calcConst() {\n\n        // Calculer les constantes //\n\n        var smaPlageU = smaMaxU.value - smaMinU.value;\n        var vMin = uMin.value / Math.sqrt(3);\n        var vMax = uMax.value / Math.sqrt(3);\n        var bvMin = uMin.value * 1000 / KU.value / Math.sqrt(3);\n        var bvMax = uMax.value * 1000 / KU.value / Math.sqrt(3);\n        var buMin = uMin.value * 1000 / KU.value;\n        var buMax = uMax.value * 1000 / KU.value;\n        var faMin = smaPlageU * (1 - Math.pow(bvMax, 2) / (Math.pow(bvMax, 2) - Math.pow(bvMin, 2)));\n        var faMax = smaPlageU / (Math.pow(bvMax, 2) - Math.pow(bvMin, 2));\n        var faMoo = (smaPlageU - faMin) / faMax;\n        var faTot = Math.sqrt(faMoo);\n\n        // Stocker les datas constantes //\n        _data.data.smaPlageU = parseFloat(smaPlageU);\n        _data.data.KU = parseFloat(KU.value);\n        _data.data.uMin = parseFloat(uMin.value);\n        _data.data.uMax = parseFloat(uMax.value);\n        _data.data.faMin = parseFloat(faMin);\n        _data.data.faMax = parseFloat(faMax);\n        _data.data.faMoo = parseFloat(faMoo);\n        _data.data.faTot = parseFloat(faTot);\n        _data.data.smaMinU = parseFloat(smaMinU.value);\n        _data.data.smaMaxU = parseFloat(smaMaxU.value);\n    }\n\n    // Sélection famille //\n\n    var razAff = function razAff() {\n        calcConst();\n        if (_data.data.fuHT == 0) {\n            fuHT.value = 0;\n            _data.data.uMin = parseFloat(uMin.value);\n            _data.data.uMax = parseFloat(uMax.value);\n        } else if (_data.data.fuHT == 1) {\n            fuHT.value = 1;\n            uMin.value = 0;\n            uMax.value = Math.round(_data.data.KU * 124 / 10) / 100;\n            _data.data.uMin = parseFloat(uMin.value);\n            _data.data.uMax = parseFloat(uMax.value);\n        } else if (_data.data.fuHT == 2) {\n            fuHT.value = 2;\n            uMin.value = Math.round(_data.data.KU * 78 / 10) / 100;\n            uMax.value = Math.round(_data.data.KU * 121.25 / 10) / 100;\n            _data.data.uMin = parseFloat(uMin.value);\n            _data.data.uMax = parseFloat(uMax.value);\n        }\n        vHT.placeholder = \"Entrez la valeur\";\n        vHT.value = \"\";\n        uHT.placeholder = \"Entrez la valeur\";\n        uHT.value = \"\";\n        vsma.placeholder = \"Entrez la valeur\";\n        vsma.value = \"\";\n        vBT.placeholder = \"Entrez la valeur\";\n        vBT.value = \"\";\n        (0, _data.writeData)();\n    };\n\n    // Evenements //\n\n    // Changement de Famille //\n\n    fuHT.addEventListener('change', function () {\n        _data.data.fuHT = parseFloat(fuHT.value);\n        razAff();\n    });\n\n    // Changement de plage réglée //\n\n    uMin.addEventListener('change', function () {\n        _data.data.fuHT = 0;\n        razAff();\n    });\n\n    uMax.addEventListener('change', function () {\n        _data.data.fuHT = 0;\n        razAff();\n    });\n\n    // Changement rapport TT //\n\n    KU.addEventListener('change', function () {\n        razAff();\n    });\n\n    // Changement des valeurs Min Max de sortie mA //\n\n    smaMinU.addEventListener('change', function () {\n        razAff();\n    });\n\n    smaMaxU.addEventListener('change', function () {\n        razAff();\n    });\n\n    // Calcul et affichage des valeurs  //\n\n    uHT.addEventListener('change', function () {\n        calcConst();\n\n        _data.data.uHT = parseFloat(uHT.value * 1000);\n        _data.data.vHT = _data.data.uHT / Math.sqrt(3);\n        _data.data.vBT = _data.data.uHT / Math.sqrt(3) / _data.data.KU;\n        _data.data.sma = _data.data.vBT * _data.data.vBT * _data.data.faMax + _data.data.faMin;\n\n        vHT.placeholder = Math.round(_data.data.vHT / 10) / 100;\n        vHT.value = Math.round(_data.data.vHT / 10) / 100;\n        vBT.placeholder = Math.round(_data.data.vBT * 100) / 100;\n        vBT.value = Math.round(_data.data.vBT * 100) / 100;\n        vsma.placeholder = Math.round((_data.data.sma + _data.data.smaMinU) * 100) / 100;\n        vsma.value = Math.round((_data.data.sma + _data.data.smaMinU) * 100) / 100;\n    });\n\n    vHT.addEventListener('change', function () {\n        calcConst();\n\n        _data.data.vHT = parseFloat(vHT.value * 1000);\n        _data.data.uHT = _data.data.vHT * Math.sqrt(3);\n        _data.data.vBT = _data.data.vHT / _data.data.KU;\n        _data.data.sma = _data.data.vBT * _data.data.vBT * _data.data.faMax + _data.data.faMin;\n\n        uHT.placeholder = Math.round(_data.data.uHT * 1000) / 1000;\n        uHT.value = Math.round(_data.data.uHT / 10) / 100;\n        vBT.placeholder = Math.round(_data.data.vBT * 100) / 100;\n        vBT.value = Math.round(_data.data.vBT * 100) / 100;\n        vsma.placeholder = Math.round((_data.data.sma + _data.data.smaMinU) * 100) / 100;\n        vsma.value = Math.round((_data.data.sma + _data.data.smaMinU) * 100) / 100;\n    });\n\n    vBT.addEventListener('change', function () {\n        calcConst();\n\n        _data.data.vBT = parseFloat(vBT.value);\n        _data.data.vHT = _data.data.vBT * _data.data.KU;\n        _data.data.uHT = _data.data.vBT * _data.data.KU * Math.sqrt(3);\n        _data.data.sma = _data.data.vBT * _data.data.vBT * _data.data.faMax + _data.data.faMin;\n\n        vHT.placeholder = Math.round(_data.data.vHT * 1000) / 1000;\n        vHT.value = Math.round(_data.data.vHT / 10) / 100;\n        uHT.placeholder = Math.round(_data.data.uHT * 1000) / 1000;\n        uHT.value = Math.round(_data.data.uHT / 10) / 100;\n        vsma.placeholder = Math.round((_data.data.sma + _data.data.smaMinU) * 100) / 100;\n        vsma.value = Math.round((_data.data.sma + _data.data.smaMinU) * 100) / 100;\n    });\n\n    vsma.addEventListener('change', function () {\n        calcConst();\n\n        _data.data.sma = parseFloat(vsma.value) - _data.data.smaMinU;\n        _data.data.vHT = Math.sqrt((_data.data.sma - _data.data.faMin) / _data.data.faMax) * _data.data.KU;\n        _data.data.uHT = Math.sqrt((_data.data.sma - _data.data.faMin) / _data.data.faMax) * _data.data.KU * Math.sqrt(3);\n        _data.data.vBT = Math.sqrt((_data.data.sma - _data.data.faMin) / _data.data.faMax);\n\n        vHT.placeholder = Math.round(_data.data.vHT * 1000) / 1000;\n        vHT.value = Math.round(_data.data.vHT / 10) / 100;\n        uHT.placeholder = Math.round(_data.data.uHT * 1000) / 1000;\n        uHT.value = Math.round(_data.data.uHT / 10) / 100;\n        vBT.placeholder = Math.round(_data.data.vBT * 100) / 100;\n        vBT.value = Math.round(_data.data.vBT * 100) / 100;\n    });\n};\n\nexports.default = calcTens;\n\n//# sourceURL=webpack:///./src/u.calc.js?");

/***/ }),

/***/ "./src/u.render.js":
/*!*************************!*\
  !*** ./src/u.render.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _data = __webpack_require__(/*! ./data.js */ \"./src/data.js\");\n\nvar renderTens = function renderTens() {\n    container.innerHTML = '\\n    <div class=\"intercal\">\\n    <p class=\"mb-1\">\\n    <a>Calcul des valeurs</a>\\n</p>\\n\\n<div class=\"input-group mb-2\">\\n    <div class=\"input-group-prepend\">\\n        <label class=\"input-group-text text-light bg-secondary\">HT Triphas\\xE9</label>\\n    </div>\\n    <input type=\"number\" id=\"uHT\" placeholder=\"Entrez la valeur\" class=\"form-control\" aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\">\\n    <div class=\"input-group-append\">\\n        <span class=\"input-group-text text-light bg-secondary\">kV</span>\\n    </div>\\n</div>\\n\\n<div class=\"input-group mb-2\">\\n    <div class=\"input-group-prepend\">\\n        <label class=\"input-group-text text-light bg-primary\">HT Monophas\\xE9</label>\\n    </div>\\n    <input type=\"number\" id=\"vHT\" placeholder=\"Entrez la valeur\" class=\"form-control\" aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\">\\n    <div class=\"input-group-append\">\\n        <span class=\"input-group-text text-light bg-primary\">kV</span>\\n    </div>\\n</div>\\n\\n<div class=\"input-group mb-2\">\\n    <div class=\"input-group-prepend\">\\n        <label class=\"input-group-text text-light bg-danger\">BT Monophas\\xE9</label>\\n    </div>\\n    <input type=\"number\" id=\"vBT\" placeholder=\"Entrez la valeur\" class=\"form-control\" aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\">\\n    <div class=\"input-group-append\">\\n        <span class=\"input-group-text text-light bg-danger\">V</span>\\n    </div>\\n</div>\\n\\n<div class=\"input-group mb-2\">\\n    <div class=\"input-group-prepend\">\\n        <label class=\"input-group-text text-light bg-success\">Sortie proc\\xE9d\\xE9</label>\\n    </div>\\n    <input type=\"number\" id=\"vsma\" placeholder=\"Entrez la valeur\" class=\"form-control\" aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\">\\n    <div class=\"input-group-append\">\\n        <span class=\"input-group-text text-light bg-success\">mA</span>\\n    </div>\\n</div>\\n</div>\\n\\n<div class=\"intercal\">\\n<p class=\"mb-1\">\\n    <a>Transformateur de tension</a>\\n</p>\\n\\n<div class=\"input-group mb-2\">\\n    <div class=\"input-group-prepend\">\\n        <label for \"KU\" class=\"input-group-text\">HT / BT</label>\\n    </div>\\n    <select id=\"KU\" class=\"custom-select\" value=\"\">\\n    <option value=\"200\">20 kV / 100 V</option>\\n    <option value=\"450\">45 kV / 100 V</option>\\n    <option value=\"600\">60 kV / 100V</option>\\n    <option value=\"630\">63 kV / 100V</option>\\n    <option value=\"900\">90 kV / 100 V</option>\\n    <option value=\"1500\">150 kV / 100V</option>\\n    <option value=\"2200\">220 kV / 100V</option>\\n    <option value=\"2250\">225 kV / 100V</option>\\n    <option value=\"4000\">400 kV / 100V</option>\\n    </select>\\n</div>\\n\\n<p class=\"mb-1\">\\n    <a>Param\\xE8tres du capteur</a>\\n</p>\\n\\n<div class=\"input-group mb-2\">\\n    <div class=\"input-group-prepend\">\\n        <label class=\"input-group-text\" for=\"fuHT\">Famille BT</label>\\n    </div>\\n    <select id=\"fuHT\" class=\"custom-select\" value=\"\">\\n        <option value=\"0\">Plage r\\xE9gl\\xE9e</option>\\n        <option value=\"1\">U1 : 0 \\xE0 124/\\u221A3 V</option>\\n        <option value=\"2\">U2 : 78/\\u221A3 \\xE0 121,25/\\u221A3 V</option>\\n    </select>\\n</div>\\n\\n<div class=\"input-group mb-2\">\\n    <div class=\"input-group-prepend\">\\n        <label class=\"input-group-text\" for=\"uMin\">Plage HT r\\xE9gl\\xE9e</label>\\n    </div>\\n    <input class=\"form-control\" aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\" id=\"uMin\" type=\"number\" value=\"\"/>\\n    <span class=\"input-group-text input-group-middle\">\\xE0</span>\\n    <input class=\"form-control\" aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\" id=\"uMax\" type=\"number\" value=\"\"/>\\n    <div class=\"input-group-append\">\\n        <span class=\"input-group-text\">kV</span>\\n    </div>\\n</div>\\n\\n<div class=\"input-group mb-2\">\\n    <div class=\"input-group-prepend\">\\n        <label for \"smaMinU\" class=\"input-group-text\">Sortie</label>\\n    </div>\\n    <select id=\\'smaMinU\\' class=\"custom-select\" value=\"\">\\n    <option value=\"0\">0</option>\\n    <option value=\"4\">4</option>\\n    </select>\\n\\n    <span class=\"input-group-text input-group-middle\">\\xE0</span>\\n\\n    <select id=\\'smaMaxU\\' class=\"custom-select\" value=\"\">\\n    <option value=\"5\">5</option>\\n    <option value=\"10\">10</option>\\n    <option value=\"20\">20</option>\\n    </select>\\n    <div class=\"input-group-append\">\\n    <span class=\"input-group-text\">mA</span>\\n</div>\\n</div>\\n</div>\\n';\n};\n\nexports.default = renderTens;\n\n//# sourceURL=webpack:///./src/u.render.js?");

/***/ }),

/***/ "./src/windowsAPI.js":
/*!***************************!*\
  !*** ./src/windowsAPI.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _data = __webpack_require__(/*! ./data.js */ \"./src/data.js\");\n\n// Theme Windows10 //\n\nvar windowsTheme = function windowsTheme() {\n    // Découverte du theme Windows 10 //\n\n    var checkTheme = function checkTheme() {\n        if (window.Windows) {\n\n            var uiSettings = new Windows.UI.ViewManagement.UISettings();\n            var color = uiSettings.getColorValue(Windows.UI.ViewManagement.UIColorType.background);\n            if (color.b === 0) {\n                return \"dark\";\n            } else {\n                return \"light\";\n            }\n        }\n    };\n\n    _data.data.theme = checkTheme();\n};\n\nexports.default = windowsTheme;\n\n//# sourceURL=webpack:///./src/windowsAPI.js?");

/***/ })

/******/ });